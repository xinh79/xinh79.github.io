---
layout:      post
title:       "操作系统之设备管理"
subtitle:    "Operating System"
author:      "Ashior"
header-img:  "img/ReadNotes/bg-operating system.jpg"
catalog:     true
tags:
  - 读书笔记
  - 操作系统
  - 工作
---

> 文章内容部分来自与两位大神[ZhongFuCheng3y](https://github.com/ZhongFuCheng3y/3y)与[Cyc2018](https://github.com/CyC2018/CS-Notes)

[TOC]

----

## 设备管理概述

- 计算机系统的一个重要组成部分是I/O系统，在该系统中包括用于实现信息输入、输出和存储功能的设备和相应的设备控制器，在有些大型机中，还有I/O通道或I/O处理机。
- I/O设备是计算机系统中重要的资源，并且品种繁多，功能各异，因此设备管理是操作系统中最繁杂而且硬件紧密相关的部分。
- 设备管理的对象是I/O设备，设备控制器和I/O通道。
- 设备管理的基本任务是完成用户提出的I/O请求，提高I/O速度，改善I/O设备的利用率。
- 设备管理的功能包括缓冲区管理、设备分配、设备处理、虚拟设备以及实现设备独立性等。

#### IO系统

计算机的I/O系统是**主机和外设之间的数据传送系统**，目前主要有**总线型结构和通道型结构两种类型**。

与计算机相连接的外部设备有**字符设备**和**块设备**两种类型。
前者一次只能传送一个字符，传送速度比较低；后者一次可以传送一个字符块，传送速度快，效率高

----

## 设备控制器

设备控制器是计算机中的一个实体，其主要职责是控制一个或多个I/O设备，以实现I/O设备和计算机之间的数据交换。它是CPU与I/O设备之间的接口，它接收从CPU发来的命令，并去控制I/O设备工作，以使处理机从繁杂的设备控制事务中解脱出来。

设备控制器是一个可编址的设备，当它仅控制一个设备时，它只有一个唯一的设备地址；若控制可连接多个设备时，则应含有多个设备地址，并使每一个设备地址对应一个设备。

设备控制器的复杂性因不同设备而异，相差甚大，于是可把设备控制器分成两类：

一类是用于控制字符设备的控制器，另一类是用于控制块设备的控制器。

----

## 通道

设备控制器减少了CPU对I/O的操作，但是当I/O设备较多时，设备控制器的数量也会增加，于是又退化到了类似早期设备较少时的情形，因而CPU的负担仍然很重。

- 为了实现速度匹配，并使CPU与I/O操作尽可能地并行工作，以提高CPU的利用率，IBM公司提出了“通道”的概念。
- **通道是一种通过执行通道程序管理I/O操作的控制器，它使CPU与I/O操作达到更高的并行度**。
- 在采用通道的系统中，除了一般的机器指令系统外，**系统还设置了供通道专用的一组通道指令**，用通道指令编制成通道程序。

通道的任务：**由CPU处理的I/O任务转由通道承担，从而把CPU从繁杂的I/O任务中解脱出来。 **

----

## 缓冲管理

在设备管理部分，**存在的主要矛盾是高速的CPU和低速I/O设备之间速度不匹配的问题。**

对于这种问题，处理的方法一般是增加缓冲。类似的，在计算机网络通信中，**高速发送设备和低速接收设备之间为了防止数据的丢失，也会增加缓冲区。**

- 缓和CPU和I/O设备速度不匹配的矛盾；
- 减少对CPU的中断频率，放宽对中断响应时间的限制；
- 提高CPU和I/O设备之间的并行性。

#### 单缓冲、双缓冲

双缓冲，也成缓冲对换。在IO设备和CPU之间设置了两个缓冲区，使得它们能够交替访问不同的缓冲区，从而提高数据处理的效率。在输入与输出的速度基本匹配时可得到较好的效果，否则，由于缓冲区太少，不能缓解IO设备和CPU之间的速度压力。双缓冲退化为单缓冲。

存在问题：当速度不匹配时效果退化到单缓冲机制的程度。

解决办法：增加缓冲个数，按照循环链的方式组织缓冲区。

#### 进程同步

在循环缓冲机制中，如果输入数据和读取数据的速度相当，则运行平稳；如果速度差异较大，则最出现所有缓冲区均为空而无数据可提取或者所有缓冲区均为满而无法输入数据的情况。因此，需要控制数据提取进程和数据输入进程的同步，防止出现与时间相关的错误。

----

## 设备控制表

系统中的每台设备都有一张设备控制表(DCT)。在DCT中充分体现出了设备的类型、标识符、状态(忙/闲)、重复执行次数、设备号以及与该设备相连的设备控制器的地址和等待使用该设备的进程队列。

系统为每个控制器配置一张用于记录本控制器情况的表，称为控制器控制表(COCT)。系统为每个通道都配置一张通道控制表，通道控制表(CHCT)。

系统设备表：

- 在系统设备表(System Device Table, SDT)表中，每个接入系统中的外围设备都占有一个表目项，记录了该设备的名称、标识及设备控制表DTC的入口地址等相关的信息。
- SDT表在整个系统中只有一张，全面反映了系统中的外设资源的类型、数量、占用情况等。

设备分配的总原则：**合理使用外设(公平和避免死锁)，提高设备使用率。**

----

## 设备分配算法

#### 先来先服务FCFS

当若干进程申请某一设备的请求得不到满足时，必须排入等队列中。这些进程由于申请的有先后次序，故排入等待队列的次序也是不相同的。当该设备被归还给系统后，就可以重新分配，此时，系统按进程在等待队列中排队的先后次序，将设备分给最早排入队列的那个进程。

#### 优先级高者优先

在此分配对策中，进程的优先级起了决定作用。当从等待某设备的进程队列中挑选下一个可占用设备的进程时，按进程所具有的优先级处理。高优先级的进程先分配，同优先级的，先申请先分配

#### 设备分配的安全性

- 安全分配方式：进程发出I/O请求→阻塞→等待被唤醒
- 不安全分配方式：进程发出I/O请求→继续执行→根据需要继续发出I/O请求

----

## SPOOLing技术

将一台物理的IO设备虚拟为多台的逻辑IO设置，这样多个用户就可以共享一台物理IO设置了。

虚拟设备技术假脱机操作(Simultaneous Peripheral Operations On-Line，SPOOLing)，利用专门的外围控制机，将低速I/O设备上的数据传送到高速磁盘上；或者相反。

利用假脱机技术，可把独享设备转变成具有共享特征的虚拟设备，从而提高设备利用率。

由于我们的多道程序技术引入后，我们的利用专门的外围控制机就可以使用程序来进行模拟了。

#### 高速虚拟I/O操作

应用程序的虚拟I/O比实际I/O速度提高，缩短应用程序的执行时间(尽快完成计算，并释放占用的计算机资源)。

另一方面，程序的虚拟I/O操作时间和实际I/O操作时间分离开来。

#### 实现对独享设备的共享

由SPOOLing程序提供虚拟设备，可以对独享设备依次共享使用。

----

## 磁盘调度算法

读写一个磁盘块的时间的影响因素有：

1. 旋转时间（主轴转动盘面，使得磁头移动到适当的扇区上）
2. 寻道时间（制动手臂移动，使得磁头移动到适当的磁道上）
3. 实际的数据传输时间

其中，寻道时间最长，因此磁盘调度的主要目标是使磁盘的平均寻道时间最短。

#### 先来先服务

按照磁盘请求的顺序进行调度。优点是公平和简单。缺点也很明显，因为未对寻道做任何优化，使平均寻道时间可能较长。

#### 最短寻道时间优先

优先调度与当前磁头所在磁道距离最近的磁道。

虽然平均寻道时间比较低，但是不够公平。如果新到达的磁道请求总是比一个在等待的磁道请求近，那么在等待的磁道请求会一直等待下去，也就是出现饥饿现象。具体来说，两端的磁道请求更容易出现饥饿现象。

![21](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/4e2485e4-34bd-4967-9f02-0c093b797aaa.png)

#### 电梯算法

电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向。

电梯算法（扫描算法）和电梯的运行过程类似，总是按一个方向来进行磁盘调度，直到该方向上没有未完成的磁盘请求，然后改变方向。因为考虑了移动方向，因此所有的磁盘请求都会被满足，解决了 SSTF 的饥饿问题。

![22](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/271ce08f-c124-475f-b490-be44fedc6d2e.png)

