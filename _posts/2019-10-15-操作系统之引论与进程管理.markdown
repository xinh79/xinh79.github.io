---
layout:      post
title:       "操作系统之引论与进程管理"
subtitle:    "Operating System"
author:      "Ashior"
header-img:  "img/ReadNotes/bg-operating system.jpg"
catalog:     true
tags:
  - 读书笔记
  - 操作系统
  - 工作
---

> 文章内容部分来自与两位大神[ZhongFuCheng3y](https://github.com/ZhongFuCheng3y/3y)与[Cyc2018](https://github.com/CyC2018/CS-Notes)

[TOC]

----

## 基本特征

#### 并发性

**并发**是指宏观上在一段时间内能同时运行多个程序，而**并行**则指同一时刻能运行多个指令。并行需要硬件支持，如多流水线、多核处理器或者分布式计算系统。

操作系统通过引入进程和线程，使得程序能够**并发运行**。

并发性是指同一时间间隔内发生两个或多个事件。并行性是指同一时刻内发生两个或多个事件。

#### 共享性

共享是指系统中的资源可以被多个并发进程共同使用。

有两种共享方式：**互斥共享**和**同时共享**。

互斥共享的资源称为**临界资源**，例如打印机等，在同一时刻只允许一个进程访问，需要用同步机制来实现互斥访问。

#### 虚拟性

虚拟技术把一个物理实体转换为多个逻辑实体。即通过某种技术把一个物理实体变为若干个逻辑上的对应物。

主要有两种虚拟技术：时（时间）分复用技术和空（空间）分复用技术。

多个进程能在同一个处理器上**并发执行使用了时分复用技术**，让每个进程轮流占用处理器，每次只执行一小个时间片并快速切换。

**虚拟内存使用了空分复用技术**，它将物理内存抽象为地址空间，每个进程都有各自的地址空间。地址空间的页被映射到物理内存，地址空间的页并不需要全部在物理内存中，当使用到一个没有在物理内存的页时，执行页面置换算法，将该页置换到内存中。

#### 异步性

异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。只要环境相同，作业经过多次的运行，所获得的结果也应该是完全相同的。

----

## 基本功能

#### 进程管理

进程控制、进程同步、进程通信、死锁处理、处理机调度等。

#### 内存管理

内存分配、地址映射、内存保护与共享、虚拟内存等。

#### 文件管理

文件存储空间的管理、目录管理、文件读写管理和保护等。

#### 设备管理

完成用户的 I/O 请求，方便用户使用各种设备，并提高设备的利用率。主要包括缓冲管理、设备分配、设备处理、虛拟设备等。

----

## 系统调用

如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成。

Linux 的系统调用主要有以下这些：

| Task | Commands |
| :----: | :----: |
| 进程控制 | fork(); exit(); wait(); |
| 进程通信 | pipe(); shmget(); mmap(); |
| 文件操作 | open(); read(); write(); |
| 设备操作 | ioctl(); read(); write(); |
| 信息维护 | getpid(); alarm(); sleep(); |
| 安全 | chmod(); umask(); chown(); |

----

## 大内核和微内核

#### 大内核

大内核是将操作系统功能作为一个紧密结合的整体放到内核。由于各模块共享信息，因此有很高的性能。

#### 微内核

由于操作系统不断复杂，因此将一部分操作系统功能移出内核，从而降低内核的复杂性。移出的部分根据分层的原则划分成若干服务，相互独立。

在微内核结构下，操作系统被划分成小的、定义良好的模块，只有微内核这一个模块运行在内核态，其余模块运行在用户态。

因为需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失。

----

## 中断的分类

#### 外中断

由 CPU 执行指令以外的事件引起，如 I/O 完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。

#### 异常

由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。

#### 陷入

在用户程序中使用系统调用。

----

## 进程与线程

#### 进程

**进程的定义：**(1) 进程是程序的一次执行。(2) 进程是一个程序及其数据在处理机上顺序执行时所发生的活动。(3) 进程是具有独立功能的程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。

程序不能独立运行，作为资源分配和独立运行的单位是进程。操作系统所具有的四大特征也都是基于进程而形成的。

操作系统的发展历史，我们知道未配置操作系统和单批到处理系统的程序是按照顺序执行的。只有前边的程序执行完了，后边的程序才能执行。因此，CPU的利用率是非常低下的。为了能更好地描述程序的顺序和并发执行情况，我们先介绍用于描述程序执行先后顺序的前趋图。所谓前趋图(Precedence Graph)，是指一个有向无循环图，可记为DAG(Directed Acyclic Graph)，它用于描述进程之间执行的先后顺序。根据前趋图，我们就可以发现程序有以下的三个特性：

1. **顺序性：**指处理机严格地按照程序所规定的顺序执行，即每一操作必须在下一个操作开始之前结束；
2. **封闭性：**指程序在封闭的环境下运行，即程序运行时独占全机资源，资源的状态(除初始状态外)只有本程序才能改变它，程序一旦开始执行，其执行结果不受外界因素影响；
3. **可再现性：**指只要程序执行时的环境和初始条件相同，当程序重复执行时，不论它是从头到尾不停顿地执行，还是“停停走走”地执行，都可获得相同的结果。

但是，当程序中引入了并发这么一个概念的时候，会给程序带来新的特征：(1) 间断性。(2) 失去封闭性。(3) 不可再现性。

**为什么要引入进程：**在多道程序环境下，程序的执行属于并发执行，此时它们将失去其封闭性，并具有间断性，以及其运行结果不可再现性的特征。由此，决定了通常的程序是不能参与并发执行的，否则，程序的运行也就失去了意义。为了能使程序并发执行，并且可以对并发执行的程序加以描述和控制，人们引入了“进程”的概念。

**引入进程就是为了能够让程序能够并发执行！**


**进程**是资源分配的基本单位。

进程控制块 (Process Control Block, PCB) 描述进程的基本信息和运行状态，所谓的创建进程和撤销进程，都是指对 PCB 的操作。除了进程具有程序所没有的PCB结构外，还具有下面一些特征：(1) 动态性。(2) 并发性。(3) 独立性。(4) 异步性。

#### 线程

**线程**是独立调度的基本单位。

一个进程中可以有多个线程，它们共享进程资源。QQ和浏览器是两个进程，浏览器进程里面有很多线程，例如 HTTP 请求线程、事件响应线程、渲染线程等等，线程的并发执行使得在浏览器中点击一个新链接从而发起 HTTP 请求时，浏览器还可以响应用户的其它事件。

#### 区别

1. **拥有资源**：进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。
2. **调度**：线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。
3. **系统开销**：由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。
4. **通信方面**：线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC。

----

## 进程状态的切换

一般而言，每一个进程至少应处于以下三种基本状态之一：

![ProcessState](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ProcessState.png)

- 就绪状态（ready）：等待被调度
- 运行状态（running）
- 阻塞状态（waiting）：等待资源

应该注意以下内容：

- 只有就绪态和运行态可以相互转换，其它的都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。
- 阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括 CPU 时间，缺少 CPU 时间会从运行态转换为就绪态。

#### 进程之间的关系

无关进程：不交换数据、不共同访问资源，绝大多数进程间是无关的。

相关进程：间接制约：互斥关系、访问临界资源时互斥、进程间不交换数据；直接制约：同步关系、两者交换数据。

在进程有关系的时候有两种关系互斥（间接制约）同步（直接制约）。

---

## 操作系统分类

#### 工作方式

批处理操作系统
分时操作系统
实时操作系统
网络操作系统
分布式操作系统

#### 运行环境

桌面操作系统
嵌入式操作系统

#### 架构

单内核操作系统
微内核操作系统
超微内核操作系统
外核操作系统

#### 指令长度

8bit操作系统
16bit操作系统
32bit操作系统
64bit操作系统

----

## 进程调度算法

进程控制是指系统使用一些**具有特定功能的程序段来创建、撤消进程以及完成进程各状态间的转换，从而达到多进程高效率并发执行和协调、实现资源共享的目的**。进程的控制是通过原语实现的。用于进程控制的原语有：创建原语、撤消原语、阻塞原语、唤醒原语、挂起原语和激活原语等。

不同环境的调度算法目标不同，因此需要针对不同环境来讨论调度算法。

#### 批处理系统

**单道批处理系统：**行批处理，操作员把用户提交的作业分类，把一批中的作业编成一个作业执行序列。每一批作业将有专门编制的监督程序(Monitor)自动依次处理

**多道批处理系统：**多道程序的运行特点是计算机内存中同时存放多道**相互独立的程序**。多道批处理系统的缺点是无交互性，用户一旦提交作业就失去了对其运行的控制能力；同时，由于是批处理，所以作业周转时间长，用户使用不方便。

批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。

1. **先来先服务 first-come first-serverd（FCFS）**：非抢占式的调度算法，按照请求的顺序进行调度。有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。
2. **短作业优先 shortest job first（SJF）**：非抢占式的调度算法，按估计运行时间最短的顺序进行调度。长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。
3. **最短剩余时间优先 shortest remaining time next（SRTN）**：最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。 当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。

#### 交互式系统

分时(Time Sharing)是把计算机的系统资源(尤其是CPU时间)进行时间上的分割，每个时间段称为一个时间片(Time Slice)，每个用户依次轮流使用时间片分时系统具有交互性、多用户同时性和独立性的特征。

交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。

**时间片轮转：**

将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。

时间片轮转算法的效率和时间片的大小有很大关系：因为进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间。而如果时间片过长，那么实时性就不能得到保证。

**优先级调度：**

为每个进程分配一个优先级，按优先级进行调度。为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。

**多级反馈队列：**

一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。

多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8,..。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换 7 次。

每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。

![调度算法](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/042cf928-3c8e-4815-ae9c-f2780202c68f.png)

#### 实时系统

实时系统要求一个请求在一个确定时间内得到响应。分为**硬实时**和**软实时**，前者必须满足绝对的截止时间，后者可以容忍一定的超时。

实时操作系统是一种联机的用于实时控制和实时信息处理领域的操作系统，主要用于过程控制、事务处理等有实时要求的领域，其主要特征是实时性和可靠性。

----

## 进程同步

#### 临界区

对临界资源进行访问的那段代码称为临界区。为了互斥访问临界资源，每个进程在进入临界区之前，需要先进行检查。

```c
// entry section
// critical section;
// exit section
```

#### 同步与互斥

- **同步：**多个进程因为合作产生的**直接制约关系**，使得进程有一定的先后执行关系。
- **互斥：**多个进程在同一时刻只有一个进程能进入临界区。

#### 信号量

信号量机制进程同步的一个工具，使用它能够合理地分配CPU资源，管理进程一般地，我们对资源分配的时候，我们有以下的原则：

1. 同步时将信号量设置为0
2. 互斥时将信号量设置为1
3. 有几个进程设置几个信号量
4. 当等于0的时候，表示资源与进程数平衡
5. 当大于0的时候，表示资源多，临界资源有余
6. 当小于0的时候，表示资源少

信号量（Semaphore）是一个整型变量，可以对其执行 down 和 up 操作，也就是常见的 P 和 V 操作。记录型信号量机制`wait()`（P操作）申请资源，减少`signal()`（V操作）释放资源，增加。

- **down :** 如果信号量大于 0 ，执行 -1 操作；如果信号量等于 0，进程睡眠，等待信号量大于 0；
- **up ：**对信号量执行 +1 操作，唤醒睡眠的进程让其完成 down 操作。

down 和 up 操作需要被设计成原语，不可分割，通常的做法是在执行这些操作的时候屏蔽中断。

如果信号量的取值只能为 0 或者 1，那么就成为了*互斥量（Mutex）*，0 表示临界区已经加锁，1 表示临界区解锁。

```c
typedef int semaphore;
semaphore mutex = 1;void P1() {
    down(&mutex);
    // 临界区
    up(&mutex);}

void P2() {
    down(&mutex);
    // 临界区
    up(&mutex);}
```

#### 信号量的应用

**利用信号量实现进程互斥：**为使多个进程能互斥地访问某临界资源，只需为该资源设置一互斥信号量mutex，并设其初始值为1，然后将各进程访问该资源的临界区CS置于wait(mutex)和signal(mutex)操作之间即可。

**利用信号量实现前趋关系：**还可利用信号量来描述程序或语句之间的前趋关系。设有两个并发执行的进程P1和P2。P1中有语句S1；P2中有语句S2。我们希望在S1执行后再执行S2。为实现这种前趋关系，只需使进程P1和P2共享一个公用信号量S，并赋予其初值为0，将signal(S)操作放在语句S1后面，而在S2语句前面插入wait(S)操作，即：在进程P1中，用S1；signal(S)；　在进程P2中，用wait(S)；S2；

#### 进程通信

**进程通信**，是指进程之间的信息交换，其所交换的信息量大小不一。信号量机制在通信方面的缺点：1) 效率低；2) 通信对用户不透明。高级进程通信是指用户可直接利用操作系统所提供的一组通信命令，高效地传送大量数据的一种通信方式。（往往我们都是使用高级进程通信的）

在进程通信的时候还有几种类型可分：

1. **共享存储器系统：**在共享存储器系统中，相互通信的进程共享某些数据结构或共享存储区，进程之间能够通过这些空间进行通信。
2. **消息传递系统：**消息传递机制是使用最广泛的一种进程间通信的机制（这种用的多）；操作系统隐藏了通信的细节，简化了通信程序的编制。
3. **管道通信：**管道是指用于连接一个读进程和一个写进程以实现他们之间通信的一个共享文件，又名pipe文件。

消息传递系统的实现方法又可以分几种：

1. **直接通信方式：**1) 发送原语：Send（Receiver,message)；发送一个消息给接收进程；2) 接收原语：Receive(Sender,message)；接收Sender发来的消息
2. **间接通信方式：**通过信箱：指进程之间的通信，需要通过作为共享数据结构的实体。

#### 使用信号量实现生产者-消费者问题

问题描述：使用一个缓冲区来保存物品，只有缓冲区没有满，生产者才可以放入物品；只有缓冲区不为空，消费者才可以拿走物品。

因为缓冲区属于临界资源，因此需要使用一个互斥量`mutex`来控制对缓冲区的互斥访问。

为了同步生产者和消费者的行为，需要记录缓冲区中物品的数量。数量可以使用信号量来进行统计，这里需要使用两个信号量`empty`记录空缓冲区的数量，`full`记录满缓冲区的数量。其中，`empty`信号量是在生产者进程中使用，当`empty`不为 0 时，生产者才可以放入物品；`full`信号量是在消费者进程中使用，当`full`信号量不为 0 时，消费者才可以取走物品。

注意，不能先对缓冲区进行加锁，再测试信号量。也就是说，不能先执行`down(mutex)`再执行`down(empty)`。如果这么做了，那么可能会出现这种情况：生产者对缓冲区加锁后，执行`down(empty)`操作，发现`empty = 0`，此时生产者睡眠。消费者不能进入临界区，因为生产者对缓冲区加锁了，消费者就无法执行`up(empty)`操作，`empty`永远都为 0，导致生产者永远等待下，不会释放锁，消费者因此也会永远等待下去。

```c
#define N 100typedef int semaphore;
semaphore mutex = 1;
semaphore empty = N;
semaphore full = 0;

void producer() {
    while(TRUE) {
        int item = produce_item();
        down(&empty);
        down(&mutex);
        insert_item(item);
        up(&mutex);
        up(&full);
    }
}

void consumer() {
    while(TRUE) {
        down(&full);
        down(&mutex);
        int item = remove_item();
        consume_item(item);
        up(&mutex);
        up(&empty);
    }
}
```

----

## 管程

使用信号量机制实现的生产者消费者问题需要客户端代码做很多控制，而管程把控制的代码独立出来，不仅不容易出错，也使得客户端代码调用更容易。

c 语言不支持管程，下面的示例代码使用了类 Pascal 语言来描述管程。示例代码的管程提供了 insert() 和 remove() 方法，客户端代码通过调用这两个方法来解决生产者-消费者问题。

```pascal
monitor ProducerConsumer
    integer i;
    condition c;

    procedure insert();
    begin
        // ...
    end;

    procedure remove();
    begin
        // ...
    end;
end monitor;
```

管程有一个重要特性：*在一个时刻只能有一个进程使用管程。*进程在无法继续执行的时候不能一直占用管程，否则其它进程永远不能使用管程。

管程引入了*条件变量*以及相关的操作：`wait()`和`signal()`来实现同步操作。对条件变量执行`wait()`操作会导致调用进程阻塞，把管程让出来给另一个进程持有。`signal()`操作用于唤醒被阻塞的进程。

#### 使用管程实现生产者-消费者问题

```pascal
// 管程
monitor ProducerConsumer
    condition full, empty;
    integer count := 0;
    condition c;

    procedure insert(item: integer);
    begin
        if count = N then wait(full);
        insert_item(item);
        count := count + 1;
        if count = 1 then signal(empty);
    end;

    function remove: integer;
    begin
        if count = 0 then wait(empty);
        remove = remove_item;
        count := count - 1;
        if count = N -1 then signal(full);
    end;
end monitor;

// 生产者客户端
procedure producer
begin
    while true do
    begin
        item = produce_item;
        ProducerConsumer.insert(item);
    end
end;

// 消费者客户端
procedure consumer
begin
    while true do
    begin
        item = ProducerConsumer.remove;
        consume_item(item);
    end
end;
```

----

## 经典同步问题

#### 读者-写者问题

允许多个进程同时对数据进行读操作，但是不允许读和写以及写和写操作同时发生。

一个整型变量`count`记录在对数据进行读操作的进程数量，一个互斥量`count_mutex`用于对`count`加锁，一个互斥量`data_mutex`用于对读写的数据加锁。

```pascal
typedef int semaphore;
semaphore count_mutex = 1;
semaphore data_mutex = 1;int count = 0;

void reader() {
    while(TRUE) {
        down(&count_mutex);
        count++;
        if(count == 1) down(&data_mutex); // 第一个读者需要对数据进行加锁，防止写进程访问
        up(&count_mutex);
        read();
        down(&count_mutex);
        count--;
        if(count == 0) up(&data_mutex);
        up(&count_mutex);
    }
}

void writer() {
    while(TRUE) {
        down(&data_mutex);
        write();
        up(&data_mutex);
    }
}
```

第一种情况可能导致`Writer`饿死。 这种情况很重要的作家，即没有作家一旦被添加到队列中，就应该等待比绝对必要更长的等待时间（仅当有读者在作家之前进入队列时才等待）。

```c

int readcount, writecount;                   //(initial value = 0)
semaphore rmutex, wmutex, readLock, resource; //(initial value = 1)

//READER
void reader() {
<ENTRY Section>
 down(&readLock);                 //  reader is trying to enter
 down(&rmutex);                  //   lock to increase readcount
  readcount++;                 
  if (readcount == 1)          
   down(&resource);              //if you are the first reader then lock  the resource
 up(&rmutex);                  //release  for other readers
 up(&readLock);                 //Done with trying to access the resource

<CRITICAL Section>
//reading is performed

<EXIT Section>
 down(&rmutex);                  //reserve exit section - avoids race condition with readers
 readcount--;                       //indicate you're leaving
  if (readcount == 0)          //checks if you are last reader leaving
   up(&resource);              //if last, you must release the locked resource
 up(&rmutex);                  //release exit section for other readers
}

//WRITER
void writer() {
  <ENTRY Section>
  down(&wmutex);                  //reserve entry section for writers - avoids race conditions
  writecount++;                //report yourself as a writer entering
  if (writecount == 1)         //checks if you're first writer
   down(&readLock);               //if you're first, then you must lock the readers out. Prevent them from trying to enter CS
  up(&wmutex);                  //release entry section

<CRITICAL Section>
 down(&resource);                //reserve the resource for yourself - prevents other writers from simultaneously editing the shared resource
  //writing is performed
 up(&resource);                //release file

<EXIT Section>
  down(&wmutex);                  //reserve exit section
  writecount--;                //indicate you're leaving
  if (writecount == 0)         //checks if you're the last writer
   up(&readLock);               //if you're last writer, you must unlock the readers. Allows them to try enter CS for reading
  up(&wmutex);                  //release exit section
}
```

我们可以看到，每个读者都被迫获得`ReadLock`。 另一方面，作者无需单独锁定。 一旦第一个写程序锁定了`ReadLock`，则只有在队列中没有写程序时才会释放它。

从这两种情况中，我们观察到读者或作家都必须挨饿。 在解决方案之下，增加了不允许线程饥饿的约束； 也就是说，获得对共享数据的锁定的操作将始终在有限的时间内终止。

```c
int readCount;                  // init to 0; number of readers currently accessing resource

// all semaphores initialised to 1
Semaphore resourceAccess;       // controls access (read/write) to the resource
Semaphore readCountAccess;      // for syncing changes to shared variable readCount
Semaphore serviceQueue;         // FAIRNESS: preserves ordering of requests (signaling must be FIFO)

void writer()
{ 
    down(&serviceQueue);           // wait in line to be servicexs
    // <ENTER>
    down(&resourceAccess);         // request exclusive access to resource
    // </ENTER>
    up(&serviceQueue);           // let next in line be serviced

    // <WRITE>
    writeResource();            // writing is performed
    // </WRITE>

    // <EXIT>
    up(&resourceAccess);         // release resource access for next reader/writer
    // </EXIT>
}

void reader()
{ 
    down(&serviceQueue);           // wait in line to be serviced
    down(&readCountAccess);        // request exclusive access to readCount
    // <ENTER>
    if (readCount == 0)         // if there are no readers already reading:
        down(&resourceAccess);     // request resource access for readers (writers blocked)
    readCount++;                // update count of active readers
    // </ENTER>
    up(&serviceQueue);           // let next in line be serviced
    up(&readCountAccess);        // release access to readCount

    // <READ>
    readResource();             // reading is performed
    // </READ>

    down(&readCountAccess);        // request exclusive access to readCount
    // <EXIT>
    readCount--;                // update count of active readers
    if (readCount == 0)         // if there are no readers left:
        up(&resourceAccess);     // release resource access for all
    // </EXIT>
    up(&readCountAccess);        // release access to readCount
}
```

#### 哲学家进餐问题

五个哲学家围着一张圆桌，每个哲学家面前放着食物。哲学家的生活有两种交替活动：吃饭以及思考。当一个哲学家吃饭时，需要先拿起自己左右两边的两根筷子，并且一次只能拿起一根筷子。

下面是一种错误的解法，考虑到如果所有哲学家同时拿起左手边的筷子，那么就无法拿起右手边的筷子，造成死锁。

```c
#define N 5

void philosopher(int i) {
    while(TRUE) {
        think();
        take(i);       // 拿起左边的筷子
        take((i+1)%N); // 拿起右边的筷子
        eat();
        put(i);
        put((i+1)%N);
    }
}
```

为了防止死锁的发生，可以设置两个条件：必须同时拿起左右两根筷子；只有在两个邻居都没有进餐的情况下才允许进餐。

```c
#define N 5
#define LEFT (i + N - 1) % N // 左邻居
#define RIGHT (i + 1) % N    // 右邻居
#define THINKING 0
#define HUNGRY   1
#define EATING   2
typedef int semaphore;
int state[N];                // 跟踪每个哲学家的状态
semaphore mutex = 1;         // 临界区的互斥
semaphore s[N];              // 每个哲学家一个信号量

void philosopher(int i) {
    while(TRUE) {
        think();
        take_two(i);
        eat();
        put_two(i);
    }
}

void take_two(int i) {
    down(&mutex);
    state[i] = HUNGRY;
    test(i);
    up(&mutex);
    down(&s[i]);
}

void put_two(i) {
    down(&mutex);
    state[i] = THINKING;
    test(LEFT);
    test(RIGHT);
    up(&mutex);
}

void test(i) {         // 尝试拿起两把筷子
    if(state[i] == HUNGRY && state[LEFT] != EATING && state[RIGHT] !=EATING) {
        state[i] = EATING;
        up(&s[i]);
    }
}
```

----

## 进程通信

进程同步与进程通信很容易混淆，它们的区别在于：

- **进程同步：**控制多个进程按一定顺序执行；
- **进程通信：**进程间传输信息。

进程通信是一种手段，而进程同步是一种目的。也可以说，为了能够达到进程同步的目的，需要让进程进行通信，传输一些进程同步所需要的信息。

#### 管道

管道是通过调用`pipe`函数创建的，`fd[0]`用于读，`fd[1]`用于写。

```c
#include <unistd.h>
int pipe(int fd[2]);
```

它具有以下限制：只支持半双工通信（单向交替传输）；只能在父子进程或者兄弟进程中使用。

![pipe](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/53cd9ade-b0a6-4399-b4de-7f1fbd06cdfb.png)

#### FIFO

也称为命名管道，去除了管道只能在父子进程中使用的限制。

```c
#include <sys/stat.h>
int mkfifo(const char *path, mode_t mode);
int mkfifoat(int fd, const char *path, mode_t mode);
```

FIFO 常用于客户-服务器应用程序中，FIFO 用作汇聚点，在客户进程和服务器进程之间传递数据。

![fifo](https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2ac50b81-d92a-4401-b9ec-f2113ecc3076.png)

#### 消息队列

相比于 FIFO，消息队列具有以下优点：

- 消息队列可以独立于读写进程存在，从而避免了 FIFO 中同步管道的打开和关闭时可能产生的困难；
- 避免了 FIFO 的同步阻塞问题，不需要进程自己提供同步方法；
- 读进程可以根据消息类型有选择地接收消息，而不像 FIFO 那样只能默认地接收。

#### 信号量

它是一个计数器，用于为多个进程提供对共享数据对象的访问。

#### 共享存储

允许多个进程共享一个给定的存储区。因为数据不需要在进程之间复制，所以这是最快的一种 IPC。

需要使用信号量用来同步对共享存储的访问。

多个进程可以将同一个文件映射到它们的地址空间从而实现共享内存。另外 XSI 共享内存不是使用文件，而是使用内存的匿名段。

#### 套接字

与其它通信机制不同的是，它可用于不同机器间的进程通信。
