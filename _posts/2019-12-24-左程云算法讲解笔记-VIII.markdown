---
layout:      post
title:       "左程云算法讲解笔记-VIII"
subtitle:    "Algorithm"
author:      "Ashior"
header-img:  "img/bg-zuo-algorithm.jpg"
catalog:     true
tags:
  - 工作
  - 算法
  - 学习笔记
---

> 这些内容是从牛客网左程云大神的算法课程中做记录的笔记，由于内容较多，又附上源码，所以考虑一章一个模块。

[TOC]

----

## [树]Morris遍历

1. cur无左子树，cur向右
2. cur有左子树，找到左子树上最右节点，mostright。
3. mostright的右孩子为null，`mostright.right = cur`，cur向左。
4. mostright的右孩子为cur，`mostright.right = null`，cur向右。

有左子树的节点都遍历了两次，没有左子树的节点只遍历了一次。需要遍历两次的节点是先遍历自己，然后再遍历左子树，之后再遍历自己，最后遍历右子树。

一个经典的递归就是回到三次的过程。

```java
public class Code_01_MorrisTraversal {

	public static class Node {
		public int value;
		Node left;
		Node right;

		public Node(int data) {
			this.value = data;
		}
	}
	// 中序遍历
	public static void morrisIn(Node head) {
		if (head == null) {
			return;
		}
		Node cur1 = head;
		Node cur2 = null;
		while (cur1 != null) {
			cur2 = cur1.left;
			// 有左子树
			if (cur2 != null) {
				// 找到左子树最右的孩子
				while (cur2.right != null && cur2.right != cur1) {
					cur2 = cur2.right;
				}
				// 最右的孩子为空
				// 将右孩子指向cur，cur向左移动
				if (cur2.right == null) {
					cur2.right = cur1;
					cur1 = cur1.left;
					// 跳槽整个循环
					continue;
				} else {
					// 最后右孩子只有两种可能，一种指向null，一种指向cur
					// 最后右孩子不为空，说明曾经来过这里
					// 所以将其设置为空，并开始打印cur的值
					cur2.right = null;
				}
			}
			// 只要开始向右移动，就打印数据
			// 中序遍历，两种位置都是这个时机进行打印
			// 开始往右移动说明其所有左孩子已经遍历完毕
			System.out.print(cur1.value + " ");
			// 没有左子树，cur直接进入右子树
			cur1 = cur1.right;
		}
		System.out.println();
	}
	// 先序遍历，第一次来到某个节点时，直接打印
	public static void morrisPre(Node head) {
		if (head == null) {
			return;
		}
		Node cur1 = head;
		Node cur2 = null;
		while (cur1 != null) {
			cur2 = cur1.left;
			if (cur2 != null) {
				while (cur2.right != null && cur2.right != cur1) {
					cur2 = cur2.right;
				}
				if (cur2.right == null) {
					cur2.right = cur1;
					// 第一次来到某个节点处，打印他
					System.out.print(cur1.value + " ");
					cur1 = cur1.left;
					continue;
				} else {
					cur2.right = null;
				}
			} else {
				// 如果节点没有左子树，肯定只会进入一次
				System.out.print(cur1.value + " ");
			}
			cur1 = cur1.right;
		}
		System.out.println();
	}
	// 后序遍历
	public static void morrisPos(Node head) {
		if (head == null) {
			return;
		}
		Node cur1 = head;
		Node cur2 = null;
		while (cur1 != null) {
			cur2 = cur1.left;
			if (cur2 != null) {
				while (cur2.right != null && cur2.right != cur1) {
					cur2 = cur2.right;
				}
				if (cur2.right == null) {
					cur2.right = cur1;
					cur1 = cur1.left;
					continue;
				} else {
					cur2.right = null;
					// 后续遍历的时候，第二次回到此节点时逆序打印他的右边界
					printEdge(cur1.left);
				}
			}
			cur1 = cur1.right;
		}
		// 最后再逆序打印一次即可
		printEdge(head);
		System.out.println();
	}
	// 后序遍历的时候，逆序打印左子树右边界
	public static void printEdge(Node head) {
		// 整个链表逆序
		Node tail = reverseEdge(head);
		Node cur = tail;
		while (cur != null) {
			System.out.print(cur.value + " ");
			cur = cur.right;
		}
		// 将其重新调整回来
		reverseEdge(tail);
	}
	// 类似于链表的逆序
	public static Node reverseEdge(Node from) {
		Node pre = null;
		Node next = null;
		while (from != null) {
			next = from.right;
			from.right = pre;
			pre = from;
			from = next;
		}
		return pre;
	}

	// for test -- print tree
	public static void printTree(Node head) {
		System.out.println("Binary Tree:");
		printInOrder(head, 0, "H", 17);
		System.out.println();
	}

	public static void printInOrder(Node head, int height, String to, int len) {
		if (head == null) {
			return;
		}
		printInOrder(head.right, height + 1, "v", len);
		String val = to + head.value + to;
		int lenM = val.length();
		int lenL = (len - lenM) / 2;
		int lenR = len - lenM - lenL;
		val = getSpace(lenL) + val + getSpace(lenR);
		System.out.println(getSpace(height * len) + val);
		printInOrder(head.left, height + 1, "^", len);
	}

	public static String getSpace(int num) {
		String space = " ";
		StringBuffer buf = new StringBuffer("");
		for (int i = 0; i < num; i++) {
			buf.append(space);
		}
		return buf.toString();
	}

	public static void main(String[] args) {
		Node head = new Node(4);
		head.left = new Node(2);
		head.right = new Node(6);
		head.left.left = new Node(1);
		head.left.right = new Node(3);
		head.right.left = new Node(5);
		head.right.right = new Node(7);
		printTree(head);
		morrisIn(head);
		morrisPre(head);
		morrisPos(head);
		printTree(head);

	}

}
```

----

## [树]搜索二叉树

在树中的任意一个节点，左子树都比其小，右子树都比他大。搜索树十分便于查询。但是如果搜索树，不平衡的话，搜索代价可能会很大。

```java
/** Root node where whole tree starts. */
public Node root;

/** Tree size. */
protected int size;

/**
 * Because this is abstract class and various trees have different
 * additional information on different nodes subclasses uses this abstract
 * method to create nodes (maybe of class {@link Node} or maybe some
 * different node sub class).
 * 
 * @param value
 *            Value that node will have.
 * @param parent
 *            Node's parent.
 * @param left
 *            Node's left child.
 * @param right
 *            Node's right child.
 * @return Created node instance.
 */
protected Node createNode(int value, Node parent, Node left, Node right) {
	return new Node(value, parent, left, right);
}

/**
 * Finds a node with concrete value. If it is not found then null is
 * returned.
 * 
 * @param element
 *            Element value.
 * @return Node with value provided, or null if not found.
 */
public Node search(int element) {
	Node node = root;
	while (node != null && node.value != null && node.value != element) {
		if (element < node.value) {
			node = node.left;
		} else {
			node = node.right;
		}
	}
	return node;
}

/**
 * Insert new element to tree.
 * 
 * @param element
 *            Element to insert.
 */
public Node insert(int element) {
	if (root == null) {
		root = createNode(element, null, null, null);
		size++;
		return root;
	}

	Node insertParentNode = null;
	Node searchTempNode = root;
	while (searchTempNode != null && searchTempNode.value != null) {
		insertParentNode = searchTempNode;
		if (element < searchTempNode.value) {
			searchTempNode = searchTempNode.left;
		} else {
			searchTempNode = searchTempNode.right;
		}
	}

	Node newNode = createNode(element, insertParentNode, null, null);
	if (insertParentNode.value > newNode.value) {
		insertParentNode.left = newNode;
	} else {
		insertParentNode.right = newNode;
	}

	size++;
	return newNode;
}

/**
 * Removes element if node with such value exists.
 * 
 * @param element
 *            Element value to remove.
 * 
 * @return New node that is in place of deleted node. Or null if element for
 *         delete was not found.
 */
public Node delete(int element) {
	Node deleteNode = search(element);
	if (deleteNode != null) {
		return delete(deleteNode);
	} else {
		return null;
	}
}

/**
 * Delete logic when node is already found.
 * 
 * @param deleteNode
 *            Node that needs to be deleted.
 * 
 * @return New node that is in place of deleted node. Or null if element for
 *         delete was not found.
 */
protected Node delete(Node deleteNode) {
	if (deleteNode != null) {
		Node nodeToReturn = null;
		if (deleteNode != null) {
			// 两个节点相邻，让一个节点代替另外一个节点
			// 待删除节点没有左孩子，让右孩子占据
			if (deleteNode.left == null) {
				nodeToReturn = transplant(deleteNode, deleteNode.right);
			// 待删除节点没有右孩子，让左孩子占据
			} else if (deleteNode.right == null) {
				nodeToReturn = transplant(deleteNode, deleteNode.left);
			// 选择右子树最左的节点(没有左孩子)，如果最左孩子有右子树
			// 将其右子树挂在右子树的节点
			} else {
				Node successorNode = getMinimum(deleteNode.right);
				// 后继节点没有左子树，提前特殊处理
				if (successorNode.parent != deleteNode) {
					transplant(successorNode, successorNode.right);
					successorNode.right = deleteNode.right;
					successorNode.right.parent = successorNode;
				}
				transplant(deleteNode, successorNode);
				successorNode.left = deleteNode.left;
				successorNode.left.parent = successorNode;
				nodeToReturn = successorNode;
			}
			size--;
		}

		return nodeToReturn;
	}
	return null;
}

/**
 * Put one node from tree (newNode) to the place of another (nodeToReplace).
 * 
 * @param nodeToReplace
 *            Node which is replaced by newNode and removed from tree.
 * @param newNode
 *            New node.
 * 
 * @return New replaced node.
 */
private Node transplant(Node nodeToReplace, Node newNode) {
	// 父节点为空，则为根节点
	if (nodeToReplace.parent == null) {
		this.root = newNode;
	// 父节点更改孩子指向
	} else if (nodeToReplace == nodeToReplace.parent.left) {
		nodeToReplace.parent.left = newNode;
	} else {
		nodeToReplace.parent.right = newNode;
	}
	if (newNode != null) {
		newNode.parent = nodeToReplace.parent;
	}
	return newNode;
}
```

----

## [树]AVL树

左右子树的高度相差不超过1。












----

## [树]红黑树

1. 节点有红黑两种元素
2. 根节点为黑色
3. 底节点为黑色
4. 红节点的子节点为黑色
5. 任意节点的黑节点个数一样

左旋右旋操作属于原操作。

```java
/**
 * Rotate to the left.
 * 
 * @param node Node on which to rotate.
 * @return Node that is in place of provided node after rotation.
 */
protected Node rotateLeft(Node node) {
	Node temp = node.right;
	temp.parent = node.parent;

	node.right = temp.left;
	if (node.right != null) {
		node.right.parent = node;
	}

	temp.left = node;
	node.parent = temp;

	// temp took over node's place so now its parent should point to temp
	if (temp.parent != null) {
		if (node == temp.parent.left) {
			temp.parent.left = temp;
		} else {
			temp.parent.right = temp;
		}
	} else {
		root = temp;
	}
	
	return temp;
}

/**
 * Rotate to the right.
 * 
 * @param node Node on which to rotate.
 * @return Node that is in place of provided node after rotation.
 */
protected Node rotateRight(Node node) {
	Node temp = node.left;
	temp.parent = node.parent;

	node.left = temp.right;
	if (node.left != null) {
		node.left.parent = node;
	}

	temp.right = node;
	node.parent = temp;

	// temp took over node's place so now its parent should point to temp
	if (temp.parent != null) {
		if (node == temp.parent.left) {
			temp.parent.left = temp;
		} else {
			temp.parent.right = temp;
		}
	} else {
		root = temp;
	}
	
	return temp;
}
```

插入和删除节点时，顺着路径找到第一个不平衡的点，针对他进行调整，即可使整棵树平衡。增删改查的过程为`O(logN)`。

----

## [树]SB树

无

----

## 跳表

跳表(SkipList)：增加了向前指针的链表叫做指针。跳表全称叫做跳跃表，简称跳表。跳表是一个随机化的数据结构，实质是一种可以进行二分查找的有序链表。跳表在原有的有序链表上增加了多级索引，通过索引来实现快速查询。跳表不仅能提高搜索性能，同时也可以提高插入和删除操作的性能。长期期望为`O(logN)`。

这篇[博客](https://baijiahao.baidu.com/s?id=1633338040568845450&wfr=spider&for=pc) 能够让我豁然开朗。能够了解一下跳表为什么这么设计。

详细的信息请参考：[跳表分析与实现](https://blog.csdn.net/LF_2016/article/details/74999564)。 这篇博客做了比较全面的分析。具体我就不在这里复制黏贴了。还是简单罗列一下重点吧：

最后在通读一遍这篇[博客](https://blog.csdn.net/pcwl1206/article/details/83512600) 加深印象与理解。

**跳表与红黑树，AVL树等平衡数据结构的比较**：

跳表相对红黑树和AVL树相比，效率不相上下，但是跳表实现更加简单，更新不像红黑树和AVL树需要改动的地方很多。如果在多线程的情况下，红黑树和AVL树在维持平衡的时候，需要的锁资源很多，越是在靠近根节点的地方越容易产生竞争。但是跳表的操作更加局部性一点，需要锁住的资源很少。

红黑树、AVL树这样的平衡二叉树，你就会知道它们是通过左右旋的方式保持左右子树的大小平衡，而跳表是通过随机函数来维护“平衡性”。

**跳表的实现**：

1. 由很多层结构组成，level是通过一定的概率随机产生的；
2. 每一层都是一个有序的链表，默认是升序；
3. 最底层(Level 1)的链表包含所有元素；
4. 如果一个元素出现在Level i 的链表中，则它在Level i 之下的链表也都会出现；
5. 每个节点包含两个指针，一个指向同一链表中的下一个元素，一个指向下面一层的元素。

```java
// 跳表中存储的是正整数，并且存储的数据是不重复的
public class SkipList {
	
	private static final int MAX_LEVEL = 16;    // 结点的个数
	
	private int levelCount = 1;   // 索引的层级数
	
	private Node head = new Node();    // 头结点
	
	private Random random = new Random();
 
	// 查找操作
	public Node find(int value){
		Node p = head;
		for(int i = levelCount - 1; i >= 0; --i){
			while(p.next[i] != null && p.next[i].data < value){
				p = p.next[i];
			}
		}
		
		if(p.next[0] != null && p.next[0].data == value){
			return p.next[0];    // 找到，则返回原始链表中的结点
		}else{
			return null;
		}
	}
	
	// 插入操作
	public void insert(int value){
		int level = randomLevel();
		Node newNode = new Node();
		newNode.data = value;
		newNode.maxLevel = level;   // 通过随机函数改变索引层的结点布置
		Node update[] = new Node[level];
		for(int i = 0; i < level; ++i){
			update[i] = head;
		}
		
        Node p = head;
        for(int i = level - 1; i >= 0; --i){
        	while(p.next[i] != null && p.next[i].data < value){
        		p = p.next[i];
        	}
        	update[i] = p;
        }
        
        for(int i = 0; i < level; ++i){
        	newNode.next[i] = update[i].next[i];
        	update[i].next[i] = newNode;
        }
        if(levelCount < level){
        	levelCount = level;
        }
	}
	
	// 删除操作
	public void delete(int value){
		Node[] update = new Node[levelCount];
		Node p = head;
		for(int i = levelCount - 1; i >= 0; --i){
			while(p.next[i] != null && p.next[i].data < value){
				p = p.next[i];
			}
			update[i] = p;
		}
		
		if(p.next[0] != null && p.next[0].data == value){
			for(int i = levelCount - 1; i >= 0; --i){
				if(update[i].next[i] != null && update[i].next[i].data == value){
					update[i].next[i] = update[i].next[i].next[i];
				}
			}
		}
	}
	
	// 随机函数
	private int randomLevel(){
		int level = 1;
		for(int i = 1; i < MAX_LEVEL; ++i){
			if(random.nextInt() % 2 == 1){
				level++;
			}
		}
		
		return level;
	}
	
	// Node内部类
	public class Node{
		private int data = -1;
		private Node next[] = new Node[MAX_LEVEL];
		private int maxLevel = 0;
		
		// 重写toString方法
		@Override
		public String toString(){
			StringBuilder builder = new StringBuilder();
			builder.append("{data:");
			builder.append(data);
			builder.append("; leves: ");
			builder.append(maxLevel);
			builder.append(" }");
			return builder.toString();
		}
	}
	
	// 显示跳表中的结点
	public void display(){
		Node p = head;
		while(p.next[0] != null){
			System.out.println(p.next[0] + " ");
			p = p.next[0];
		}
		System.out.println();
	}
	
}
```
