---
layout:      post
title:       "左程云算法讲解笔记-VII"
subtitle:    "Algorithm"
author:      "Ashior"
header-img:  "img/bg-zuo-algorithm.jpg"
catalog:     true
tags:
  - 工作
  - 算法
  - 学习笔记
---

> 这些内容是从牛客网左程云大神的算法课程中做记录的笔记，由于内容较多，又附上源码，所以考虑一章一个模块。

[TOC]

----

## KMP算法

KMP算法的应用场景（连续子串）：str1中是否包含str2，如果包含则返回字符串str2在字符串str1中的起始位置。如果不包含则返回-1。

求解前缀和后缀相等的最长长度。

例如：

`aaaab`，求解`b`位置的信息时，只考虑`b`位置前面的字符串。保证前面的字符不移动到最后一位，最后一位的字符不移动到第0位。当为1时，两个相等，当为2时，两个也相等，当为3时，两个字符串也相等。结束，此时最长的长度为3。

`abcabcd`，求解`d`位置的信息时，当前缀为1（后缀也为1）的时候不相等，因为`a`不等于`c`，当前缀为2时，不相等，因为`ab`不等于`bc`，当前缀为3的时候，`abc`等于`abc`，所以记录。当前缀为4的时候，不相等，因为`abca`不等`cabc`。当前缀为5时，`abcab`不等`bcabc`，所以整个过程求解的结果为3。

对于复杂度分析：求解next数组的过程是对str2进行求解，求解过程的复杂度为`O(M)`，使用KMP算法的时间复杂度为`O(N)`，两者为加关系，即`O(M+N)`，又由于`M<N`，所以最后整个算法的时间复杂度为`O(N)`。

**next数组求解：**整个求解过程是不断往前跳的。人为规定next数组的0号位置为-1，1号位置为0。如果前一个数的最长前缀的下一个位置为前一个数的值，则当前位置的信息为前一个数的值递增1。如果不等于，则将前一个数的最长前缀进行划分，求解不等那个数的最长前缀值的下一个位置，判断是否等于当前位置的前一个数。

初始状态为：

`str  : x0 x1 x2 x3  ...`
`next : -1  0  `
`index:  0  1  2  3  ...`

第一个循环就是判断是否`x0==x1`，如果相等，则将x1位置存储的信息递增1。

```java
public static int[] getNextArray(char[] ms) {
	if (ms.length == 1) {
		return new int[] { -1 };
	}
	// 不为1，则必定大于等于2
	int[] next = new int[ms.length];
	// 人为规定的数据
	next[0] = -1;
	next[1] = 0;
	int pos = 2;
	// 跳到的位置
	// 最长匹配长串所压中的下一个位置
	// 如果下一个数的信息为5，即最长前缀值为5
	// 则cn指向的位置为5，前面为匹配的前缀(01234)
	int cn = 0;
	while (pos < next.length) {
		if (ms[pos - 1] == ms[cn]) {
			// 由于长度改变，cn的值需要递增1
			next[pos++] = ++cn;
		// 如果cn位置的值没有配上，则cn要划出自己的前缀信息
		// 所以此处更新cn的值
		// 此时就拿出在next数组中存储在cn位置的值继续与原来的数值进行比对
		} else if (cn > 0) {
			cn = next[cn];
		// cn不能往前跳了，防止其变为负值，设置为0值
		} else {
			next[pos++] = 0;
		}
	}
	return next;
}
```

KMP算法的主方法：

```java
public static int getIndexOf(String s, String m) {
	if (s == null || m == null || m.length() < 1 || s.length() < m.length()) {
		return -1;
	}
	char[] ss = s.toCharArray();
	char[] ms = m.toCharArray();
	int si = 0;
	int mi = 0;
	// 初始化next数组
	int[] next = getNextArray(ms);
	// si为长字符串，一直递增
	// mi为待匹配的字符串，根据next回退
	while (si < ss.length && mi < ms.length) {
		// 相等的时候一起往下走
		if (ss[si] == ms[mi]) {
			si++;
			mi++;
		// 只有0位置的才等于-1，所以这是表示0位置
		} else if (next[mi] == -1) {
			si++;
		} else {
			// 往前跳，也即数组往右推
			mi = next[mi];
		}
	}
	return mi == ms.length ? si - mi : -1;
}
```

[最长公共子序列、最长连续公共子序列、最长递增子序列](https://blog.csdn.net/Irving_zhang/article/details/79820595)

----

## [KMP]京东笔试题

给定一个字符串str1，只能往str1的后面添加字符变成str2。
要求1：str2必须包含两个str1，两个str1可以有重合，但是不 能以同一个位置开头。
要求2：str2尽量短 最终返回str2

举例：
`str1 = 123, str2 = 123123`时，包含两个str1，且不以相同 位置开头，且str2最短。
`str1 = 123123, str2 = 123123123`时，包含两个str1，且不 以相同位置开头，且str2最短。
`str1 = 111, str2 = 1111`时，包含两个str1，且不以相同位 置开头，且str2最短。

给定一个字符串，只允许往后增加字符串，使原字符串的数据在新字符串中出现两次。

例如：`abcabc`字符串，在后面增加`abc`后，形成新的字符串`abcabcabc`，此时就有两个原来的字符串。

利用KMP算法进行解决。通过求解整个数组的最后一个位置之后的X元素的next数组，获得最大前缀值，然后再将最大前缀值所表示的字符串加入即可。

例如：`abcabc`字符串，`abcabc#`即求字符`#`处的next数组值，此时求得的结果为3，表示最大前缀值为`abc`，所以将这个最大前缀直接添加到原字符串后面即。

```java
public static String answer(String str) {
	if (str == null || str.length() == 0) {
		return "";
	}
	char[] chas = str.toCharArray();
	if (chas.length == 1) {
		return str + str;
	}
	if (chas.length == 2) {
		return chas[0] == chas[1] ? (str + String.valueOf(chas[0])) : (str + str);
	}
	int endNext = endNextLength(chas);
	return str + str.substring(endNext);
}

public static int endNextLength(char[] chas) {
	int[] next = new int[chas.length + 1];
	next[0] = -1;
	next[1] = 0;
	int pos = 2;
	int cn = 0;
	while (pos < next.length) {
		if (chas[pos - 1] == chas[cn]) {
			next[pos++] = ++cn;
		} else if (cn > 0) {
			cn = next[cn];
		} else {
			next[pos++] = 0;
		}
	}
	return next[next.length - 1];
}
```

----

## 二叉树序列化

如判断某棵树是否包含在另外一棵树中。将两个数序列化，如果字符串是其子串，则必定包含其中，反之亦然。当然为了避免出现诸如`12_#_#_`与`2_#_#_`出现误判，所以需要保证两个数值相等，或者个人觉得可以在前面也加一个`_`表示一个数据的开头与结尾。即`_12__#__#_`与`_2_#_#_`。

如判断某棵树是否包含在另外一棵树中。转换为，判断字符串是否在某个

**补充：**MD5加密的方式为`2^64=16^16`，也即一个16位长度的数据，每一位有16种情况（16进制表示`0~9`，`a~f`）

```java
public class Code_03_KMP_T1SubtreeEqualsT2 {

	public static class Node {
		public int value;
		public Node left;
		public Node right;

		public Node(int data) {
			this.value = data;
		}
	}

	public static boolean isSubtree(Node t1, Node t2) {
		String t1Str = serialByPre(t1);
		String t2Str = serialByPre(t2);
		return getIndexOf(t1Str, t2Str) != -1;
	}

	public static String serialByPre(Node head) {
		if (head == null) {
			return "#!";
		}
		String res = head.value + "!";
		res += serialByPre(head.left);
		res += serialByPre(head.right);
		return res;
	}

	// KMP
	public static int getIndexOf(String s, String m) {
		if (s == null || m == null || m.length() < 1 || s.length() < m.length()) {
			return -1;
		}
		char[] ss = s.toCharArray();
		char[] ms = m.toCharArray();
		int[] nextArr = getNextArray(ms);
		int index = 0;
		int mi = 0;
		while (index < ss.length && mi < ms.length) {
			if (ss[index] == ms[mi]) {
				index++;
				mi++;
			} else if (nextArr[mi] == -1) {
				index++;
			} else {
				mi = nextArr[mi];
			}
		}
		return mi == ms.length ? index - mi : -1;
	}

	public static int[] getNextArray(char[] ms) {
		if (ms.length == 1) {
			return new int[] { -1 };
		}
		int[] nextArr = new int[ms.length];
		nextArr[0] = -1;
		nextArr[1] = 0;
		int pos = 2;
		int cn = 0;
		while (pos < nextArr.length) {
			if (ms[pos - 1] == ms[cn]) {
				nextArr[pos++] = ++cn;
			} else if (cn > 0) {
				cn = nextArr[cn];
			} else {
				nextArr[pos++] = 0;
			}
		}
		return nextArr;
	}

	public static void main(String[] args) {
		Node t1 = new Node(1);
		t1.left = new Node(2);
		t1.right = new Node(3);
		t1.left.left = new Node(4);
		t1.left.right = new Node(5);
		t1.right.left = new Node(6);
		t1.right.right = new Node(7);
		t1.left.left.right = new Node(8);
		t1.left.right.left = new Node(9);

		Node t2 = new Node(2);
		t2.left = new Node(4);
		t2.left.right = new Node(8);
		t2.right = new Node(5);
		t2.right.left = new Node(9);

		System.out.println(isSubtree(t1, t2));

	}

}
```

----

## Manacher算法

此篇博客图文并茂，建议参考：
[Manacher算法详解及模板(求解最长回文串)](https://www.jianshu.com/p/116aa58b7d81)
[Manacher算法](https://segmentfault.com/a/1190000008484167?utm_source=tag-newest)

处理回文问题。给定一个字符串，取出其中的回文长度。一个暴力的方法就是逐个字符进行操作，往外扩，左右比较看看是否相等。这是对于奇回文的情况，如果是偶回文，则无法用此方法进行判断。需要对其进行处理，将原始字符串`122221`变为`#1#2#2#2#2#1#`，此时无论奇数偶数回文串都能够匹配成功，最大值除以2即为所获得的回文串长度。

此暴力算法的时间复杂度为`O(N^2)`。

Manacher算法主要包含三个步骤：

1. P_arr：回文半径数组
2. R：回文最右边界位置
3. C：回文中心位置

检查的时候也分三种情况（详细理解请参考源代码）：

1. i在R的外边，暴力扩展
2. i在R的里面：
3. 对称位置的i的回文半径在位置R的内部(就是对称位置的回文半径值)
4. 对称位置的i的回文半径在位置R的外部(就是对称位置的回文半径值)
5. 对称位置的i的回文半径刚好压中R位置(开始暴力扩，查找下一个字符能够进行扩展)

```java
public class Code_04_Manacher {
	// 将原始字符串变为适用于manacher算法的字符串
	public static char[] manacherString(String str) {
		char[] charArr = str.toCharArray();
		char[] res = new char[str.length() * 2 + 1];
		int index = 0;
		// 往其中添加字符，偶数情况添加#字符，奇数情况添加原字符
		for (int i = 0; i != res.length; i++) {
			res[i] = (i & 1) == 0 ? '#' : charArr[index++];
		}
		return res;
	}

	public static int maxLcpsLength(String str) {
		if (str == null || str.length() == 0) {
			return 0;
		}
		// 转换成适用于manacher算法的字符串
		char[] charArr = manacherString(str);
		// 创建回文半径数组
		int[] pArr = new int[charArr.length];
		// 回文中心位置
		int index = -1;
		// 回文最右边界的位置
		int pR = -1;
		// 待返回的回文的最大长度
		int max = Integer.MIN_VALUE;
		// "abc1234321ab"->"#a#b#c#1#2#3#4#3#2#1#a#b#"
		for (int i = 0; i != charArr.length; i++) {
			// 如果回文最右边界的位置
			pArr[i] = pR > i ? Math.min(pArr[2 * index - i], pR - i) : 1;
			while (i + pArr[i] < charArr.length && i - pArr[i] > -1) {
				if (charArr[i + pArr[i]] == charArr[i - pArr[i]])
					pArr[i]++;
				else {
					break;
				}
			}
			if (i + pArr[i] > pR) {
				pR = i + pArr[i];
				index = i;
			}
			max = Math.max(max, pArr[i]);
		}
		return max - 1;
	}

	public static void main(String[] args) {
		String str1 = "abc1234321ab";
		System.out.println(maxLcpsLength(str1));
	}

}
```

----

## [微软笔试]添加字符串变成回文

给定一个字符串str1，只能往str1的后面添加字符变成str2，要求str2 整体都是回文串且最短。

举例：`str1 = ABC12321`, 返回`ABC12321CBA`

整个题意就是要求字符串str1的最后一个字符开始，判断往前计算最大回文串长度，之后再把非回文串的长度逆序后添加到字符串str1末尾形成新的字符串str2并返回。

解题思路：计算整个回文半径数组P_arr，当计算到有半径刚压中最后字符串最后一个字符时，即可确定整个回文字符串的长度，将回文直径之前的数据逆序后添加至原字符串末尾。

```java
public class Code_05_Manacher_ShortestEnd {

	public static char[] manacherString(String str) {
		char[] charArr = str.toCharArray();
		char[] res = new char[str.length() * 2 + 1];
		int index = 0;
		for (int i = 0; i != res.length; i++) {
			res[i] = (i & 1) == 0 ? '#' : charArr[index++];
		}
		return res;
	}

	public static String shortestEnd(String str) {
		if (str == null || str.length() == 0) {
			return null;
		}
		char[] charArr = manacherString(str);
		int[] pArr = new int[charArr.length];
		int index = -1;
		int pR = -1;
		int maxContainsEnd = -1;
		for (int i = 0; i != charArr.length; i++) {
			pArr[i] = pR > i ? Math.min(pArr[2 * index - i], pR - i) : 1;
			while (i + pArr[i] < charArr.length && i - pArr[i] > -1) {
				if (charArr[i + pArr[i]] == charArr[i - pArr[i]])
					pArr[i]++;
				else {
					break;
				}
			}
			if (i + pArr[i] > pR) {
				pR = i + pArr[i];
				index = i;
			}
			if (pR == charArr.length) {
				maxContainsEnd = pArr[i];
				break;
			}
		}
		char[] res = new char[str.length() - maxContainsEnd + 1];
		for (int i = 0; i < res.length; i++) {
			res[res.length - 1 - i] = charArr[i * 2 + 1];
		}
		return String.valueOf(res);
	}

	public static void main(String[] args) {
		String str2 = "abcd123321";
		System.out.println(shortestEnd(str2));

	}

}
```

----

## BFPRT算法

在一个无序数组找到第K个最小的数。

1. **通过构建一个大根堆。**将数据存入大根堆中。为什么是大根堆？当数据超过K个时，根据与大根堆的数据进行比较，然后判断是否有资格弹出堆顶元素，将自己放入大根堆中。
2. **快速排序中的partition过程。**划分过程就是将随机挑一个数，然后将整个数组分成大于该数，等于该数，小于该数的三个部分，然后判断等于区域的左右端的下标是否包含K，如果不包含，则观察下标的大小，判断应该在大于区还是在小于区，以此作为继续递归，partition的过程，直至找到包含K的等于区域的区间。（如果打偏了，value值没选好，则可能进入一个大的区间进行递归。长期期望是`O(N)`）

BFPRT算法是基于快速排序过程中partition过程的一个改进，对于value值的选取。

`int bfprt(int arr[], int k);`

arr数组的大小为N，我们需要返回其第K小的数。

1. 将数组逻辑概念上进行分组，没5个数为一组。
2. 每个小组找出中位数，并且生成一个新的中位数，加入新的数组中。

```java
public class Code_06_BFPRT {

	// O(N*logK)
	public static int[] getMinKNumsByHeap(int[] arr, int k) {
		if (k < 1 || k > arr.length) {
			return arr;
		}
		int[] kHeap = new int[k];
		for (int i = 0; i != k; i++) {
			heapInsert(kHeap, arr[i], i);
		}
		for (int i = k; i != arr.length; i++) {
			if (arr[i] < kHeap[0]) {
				kHeap[0] = arr[i];
				heapify(kHeap, 0, k);
			}
		}
		return kHeap;
	}

	public static void heapInsert(int[] arr, int value, int index) {
		arr[index] = value;
		while (index != 0) {
			int parent = (index - 1) / 2;
			if (arr[parent] < arr[index]) {
				swap(arr, parent, index);
				index = parent;
			} else {
				break;
			}
		}
	}

	public static void heapify(int[] arr, int index, int heapSize) {
		int left = index * 2 + 1;
		int right = index * 2 + 2;
		int largest = index;
		while (left < heapSize) {
			if (arr[left] > arr[index]) {
				largest = left;
			}
			if (right < heapSize && arr[right] > arr[largest]) {
				largest = right;
			}
			if (largest != index) {
				swap(arr, largest, index);
			} else {
				break;
			}
			index = largest;
			left = index * 2 + 1;
			right = index * 2 + 2;
		}
	}

	// O(N)
	public static int[] getMinKNumsByBFPRT(int[] arr, int k) {
		if (k < 1 || k > arr.length) {
			return arr;
		}
		int minKth = getMinKthByBFPRT(arr, k);
		int[] res = new int[k];
		int index = 0;
		for (int i = 0; i != arr.length; i++) {
			if (arr[i] < minKth) {
				res[index++] = arr[i];
			}
		}
		for (; index != res.length; index++) {
			res[index] = minKth;
		}
		return res;
	}

	public static int getMinKthByBFPRT(int[] arr, int K) {
		int[] copyArr = copyArray(arr);
		return select(copyArr, 0, copyArr.length - 1, K - 1);
	}

	public static int[] copyArray(int[] arr) {
		int[] res = new int[arr.length];
		for (int i = 0; i != res.length; i++) {
			res[i] = arr[i];
		}
		return res;
	}

	public static int select(int[] arr, int begin, int end, int i) {
		if (begin == end) {
			return arr[begin];
		}
		int pivot = medianOfMedians(arr, begin, end);
		int[] pivotRange = partition(arr, begin, end, pivot);
		if (i >= pivotRange[0] && i <= pivotRange[1]) {
			return arr[i];
		} else if (i < pivotRange[0]) {
			return select(arr, begin, pivotRange[0] - 1, i);
		} else {
			return select(arr, pivotRange[1] + 1, end, i);
		}
	}

	public static int medianOfMedians(int[] arr, int begin, int end) {
		int num = end - begin + 1;
		int offset = num % 5 == 0 ? 0 : 1;
		int[] mArr = new int[num / 5 + offset];
		for (int i = 0; i < mArr.length; i++) {
			int beginI = begin + i * 5;
			int endI = beginI + 4;
			mArr[i] = getMedian(arr, beginI, Math.min(end, endI));
		}
		return select(mArr, 0, mArr.length - 1, mArr.length / 2);
	}

	public static int[] partition(int[] arr, int begin, int end, int pivotValue) {
		int small = begin - 1;
		int cur = begin;
		int big = end + 1;
		while (cur != big) {
			if (arr[cur] < pivotValue) {
				swap(arr, ++small, cur++);
			} else if (arr[cur] > pivotValue) {
				swap(arr, cur, --big);
			} else {
				cur++;
			}
		}
		int[] range = new int[2];
		range[0] = small + 1;
		range[1] = big - 1;
		return range;
	}

	public static int getMedian(int[] arr, int begin, int end) {
		insertionSort(arr, begin, end);
		int sum = end + begin;
		int mid = (sum / 2) + (sum % 2);
		return arr[mid];
	}

	public static void insertionSort(int[] arr, int begin, int end) {
		for (int i = begin + 1; i != end + 1; i++) {
			for (int j = i; j != begin; j--) {
				if (arr[j - 1] > arr[j]) {
					swap(arr, j - 1, j);
				} else {
					break;
				}
			}
		}
	}

	public static void swap(int[] arr, int index1, int index2) {
		int tmp = arr[index1];
		arr[index1] = arr[index2];
		arr[index2] = tmp;
	}

	public static void printArray(int[] arr) {
		for (int i = 0; i != arr.length; i++) {
			System.out.print(arr[i] + " ");
		}
		System.out.println();
	}

	public static void main(String[] args) {
		int[] arr = { 6, 9, 1, 3, 1, 2, 2, 5, 6, 1, 3, 5, 9, 7, 2, 5, 6, 1, 9 };
		// sorted : { 1, 1, 1, 1, 2, 2, 2, 3, 3, 5, 5, 5, 6, 6, 6, 7, 9, 9, 9 }
		printArray(getMinKNumsByHeap(arr, 10));
		printArray(getMinKNumsByBFPRT(arr, 10));

	}

}
```
