---
layout:      post
title:       "读书笔记：《STL源码剖析》-III"
subtitle:    "The Annotated STL Sources(using SGI STL)"
author:      "Ashior"
header-img:  "img/ReadNotes/bg-Cpp-STL.jpg"
catalog:     true
tags:
  - C++
  - STL
  - 读书笔记
---

> 此篇章为《STL源码剖析》的读书笔记。对应于[读书笔记：《STL源码剖析》-II](https://xinh79.github.io/2019/11/13/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-STL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90-II/) 在需要作出解释的地方，我会添加相应的注释，结合视频学习，与笔者的知识储备。如果有任何错误，或者疑虑，请发送邮件至`ashior@qq.com`。

[TOC]

----

## 关联式容器

关联式容器分为set（集合）和map（映射表）两大类，以及这两大类的衍生体multiset（多键集合）和multimap（多键映射表）。这些容器的底层机制均以RB-Tree（红黑树）完成。

C++11还提供`unordered_set`和`unordered_map`，在本书中，写的是`hash_set`与`hash_map`，这是由于当时没有更新。

#### RB-Tree

RB-Tree不仅是一个二叉搜索树，而且必须满足以下规则：

1. 每个节点不是红色就是黑色（图中深色底纹代表黑色，浅色底纹代表红色，下同）。
2. 根节点为黑色。
3. 如果节点为红，其子节点必须为黑。
4. 任一节点至NULL（树尾端）的任何路径，所含之黑节点数必须相同。

![5-13](https://pic1.zhimg.com/80/v2-99c6e9f6a90c0eb1ba514f2b232857a0_hd.jpg)

红黑树提供“遍历”操作以及iterators。按正常规则（++ite）遍历，便能获得排序状态（sorted）。

我们不应使用红黑树的iterators改变元素值（因为元素有其严谨的排列规则）。编程层面并未阻绝此事。如此设计是正确的。因为红黑树为set和map提供服务（作为其底部支持），而**map允许元素的data被改变，只有元素key才是不可被改变的**。

红黑树提供两个insertion操作：`insert_unique()`和`insert_equal()`。（在G4.9中，命名改为`_M_insert_unique()`和`_M_insert_equal())`）前者表示节点的key一定在整个tree中独一无二，否则安插失败，后者表示节点key可以重复。

**AVL-Tree、RB-Tree等请读者查询相关博客。**

#### set

set的特性是，所有元素都会根据元素的键值自动被排序。set与list相同的某些特性：当客户端对它进行元素新增操作（insert）或删除操作（erase）时，操作之前的所有迭代器，在操作完成之后都依然有效。当然，被删除的那个元素的迭代器必然是一个例外。

STL特别提供了一组set/multiset相关算法：

- 交集：set_intersection
- 联级：set_union
- 差集：set_difference
- 对称差集：set_symmetric_difference

#### map

map的特性是，所有元素都会根据元素的键值自动被排序。map的所有元素都是pair，同时拥有value和key。map与list相同的某些特性：当客户端对它进行元素新增操作（insert）或删除操作（erase）时，操作之前的所有迭代器，在操作完成之后都依然有效。当然，被删除的那个元素的迭代器必然是一个例外。

不允许改变map的键值，因为map元素的键值关系到map元素的排序规则，这样会破坏map组织。

map重载了操作符`[]`，如果有，则返回相应的值，如果不存在，则使用一个默认的值，根据键值，创建出来。在源码中使用的算法`lower_bound`是二分查找的一种版本，识图在sorted`[first, last)`中寻找元素value，如果找到便返回iterator指向其中第一个元素。如果没有，则返回假设改元素存在时，最应该出现的位置。也就是说它会返回iterator指向第一个不小于value的元素。如果value大于`[first, last)`内的任何元素，将返回last。换句话说lower_bound返回的是不破坏排序得以安插value的第一个适当的位置。

#### multiset/multimap

两者与set/map的差别就是在底层RB-Tree使用的是`insert_equal()`而非`insert_unique()`。

----

## hashtable

下图是以开链法完成hashtable的图形表示。

![5-12](https://pic3.zhimg.com/80/v2-9eadce540adc0d0949de5945d7a631e2_hd.jpg)

hashtable迭代器必须永远维系着与整个“buckets vector”的关系，并记录目前所指的节点。其前进操作时首先尝试从目前所指的节点出发，前进一个位置（节点），由于节点被安置于list内，所以利用节点的next指针即可轻易达成前进操作。如果目前节点正巧是list的尾端，就跳至下一个bucket身上，那正是指向下一个list的头部节点。

bucket所维护的linked list是一种hash table node。

当元素个数大于桶子的个数时，就需要重新哈希，扩充桶子个数。STL中使用质数作为bucket的个数（53/97/193/389...，提供了28个质数）。扩充的规则就是`53*2=106`，最近的质数是97，所以扩充为97的大小。（新版的大小有所改变）

#### hash_set/hash_map

hash_set/hash_map以hashtable为底层机制。采用采用insert_unique()插入元素。

#### hash_multiset/hash_multimap

hash_multiset/hash_multimap以hashtable为底层机制。insert_equal()插入元素。

到了C++11这些容器改名为unordered_set等。
