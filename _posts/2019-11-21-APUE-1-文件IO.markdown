---
layout:      post
title:       "APUE-1-文件IO"
subtitle:    "Advanced Programming in the UNIX® Environment"
author:      "Ashior"
header-img:  "img/ReadNotes/bg-APUE.jpg"
catalog:     true
tags:
  - Linux
  - 读书笔记
---

> 此篇章为《UNIX环境高级编程》的读书笔记。对应于[此书籍](http://www.apuebook.com/) 。在需要作出解释的地方，结合笔者的知识储备，会添加相应的注释。如果有任何错误，或者疑虑，请发送邮件至`ashior@qq.com`。

[TOC]

----

## 基础

#### UNIX体系结构

下图为UNIX操作系统的体系结构。

![1-1](https://pic1.zhimg.com/80/v2-36bd9ba4ab37a74e7cb50df7c28e38fc_hd.jpg)

内核的接口称为系统调用。

#### 登录

系统在文件`/etc/passwd`中查看登录名。口令文件中的登录选项由7个以冒号分隔的字段组成，依次是：登录名、加密密码、数字用户 ID 、数字组、注释字段、起始目录（`/home/sar`）、 shell 程序（`/bin/shell`）。

加密口令已经移至另外一个文件夹中。

**shell**是一个命令行解释器，它读取用户输入，然后执行命令。

#### 文件和目录

创建目录的时候会自动创建两个文件名：`.`和`..`。点指向当前目录，点点指向父目录。

#### 输入和输出

每当运行一个新的程序时，所有的 shell 都为其打开3个文件描述符，即标准输入、标准输出和标准错误。

#### 程序和进程

程序是一个存储在磁盘上某个目录中的可执行文件。内核使用 exec 函数，将程序读入内存，并执行程序。

程序的执行实例被称为进程。某些操作系统用任务表示正在被执行的程序。

一个进程只有一个控制线程( thread )。

#### 用户标识

口令文件登录选项中的用户 ID 是一个数值，他向系统标识各个不同的用户。

用户ID为0的用户为根用户( root )或超级用户( superuser )。口令文件登录选项也可以包括用户的组 ID ，它是一个数值。组文件通常是`/etc/group`。

#### 信号

信号( signal )用于通知进程发生了某种情况。（1）忽略信号。（2）按系统默认方式处理。（3）提供一个函数进行处理。

#### 时间值

UNIX使用两种不同的时间，一种是日历事件，从1970年1月1日开始计算经过的秒数。二是进程时间，也被称为CPU时间，用以度量进程使用的中央处理器资源。进程时间以时钟滴答计算。

----

## 文件IO

#### 文件描述符

文件描述符是一个非负整数。当打开一个现有文件或创建一个新文件时，内核向进程返回一个文件描述符。

文件描述符0：标准输入
文件描述符1：标准输出
文件描述符2：标准错误

#### 函数open和openat

```c
#include <fcntl.h>
int open(const char *path, int oflag,...);
int openat(int fd, const char *path, int oflag,...);
// 两个函数，成功返回文件描述符，失败返回-1
```

`...`表示余下的参数的数量是可变的。

 path 参数主要是打开或创建文件的名称。 oflag 参数可用来说明此函数的多个选项。用一个或多个常量进行“或”运算。

`O_RDONLY`：只读打开
`O_WRONLY`：只写打开
`O_RDWR`：读、写打开
`...`

大多数实现将上述的表示符依次定义为0、1、2。 fd 参数把 open 和 openat 函数区分开，共有三种可能性。

1. path 参数指定的是绝对路径名，在这种情况下，fd 参数被忽略，openat 函数就相当于 open 函数。
2. path 参数指定的是相对路径名，fd 参数指出了相对路径名在文件系统中的开始地址。fd 参数是通过打开相对路径名所在的目录获取的。
3. path 参数指定了相对路径名，fd 参数具有特殊值 AT_FDCWD 。在这种情况下，路径名在当前工作目录中获取，openat 函数在操作上与 open 函数类似。

#### 函数create

```c
#include <fcntl.h>
int creat(const char *path, mode_t mode);
// 若成功，返回为只写打开的文件描述符；否则返回-1
```

此函数等效于：`open(path, O_WRONLY | O_CREAT | O_TRUNC, mode);`

在早期的UNIX系统版本中，open 的第二个参数只能是0、1和2.无法打开一个尚未存在的文件，因此需要另外一个系统调用 create 以创建新文件。现在 open 函数提供了选项 O_CREAT 和O_TRUNC，于是也就不再需要单独的 create 函数。

#### 函数close

```c
#include <unistd.h>
int close(int fd);
// 成功返回0，失败返回-1
```

关闭一个文件时，还是释放该进程加在该文件上的所有记录锁。当一个进程终止时，内核自动关闭它所有的打开文件。

#### 函数lseek

每个打开的文件都有一个与其相关联的“当前文件偏移量”。它通常是一个非负整数，用以度量从文件开始处计算的字节数。按照系统默认的情况，当打开一个文件时，除非指定 O_APPEN 选项，否则该偏移量被设置为0。

可以调用 lseek 显示地为一个打开文件设置偏移量。

```c
#include <unistd.h>
off_t lseek(int fd, off_t offset, int whence);
// 若成功，返回新文件偏移量，出错返回-1
```

- 若 whence 是 SEEK_SET，则将该文件的偏移量设置为距文件开始处 offset 个字节。
- 若 whence 是 SEEK_CUR，则将该文件的偏移量设置为其当前值加 offset，offset 可为正或负。
- 若 whence 是 SEEK_END，则将该文件的偏移量设置为文件长度加 offset，offset 可正可负。

若 lseek 成功执行，则返回新的文件偏移量，为此可以用以下方式确定打开文件的当前偏移量：

```c
off_t currpos;
currpos = lseek(fd, 0, SEEK_CUR);
```

```c
#include "apue.h"

int
main(void)
{
	if (lseek(STDIN_FILENO, 0, SEEK_CUR) == -1)
		printf("cannot seek\n");
	else
		printf("seek OK\n");
	exit(0);
}
```

#### 函数read

read 为打开文件从中读取数据。

```c
#include <unistd.h>
ssize_t read(int fd, void *buf, size_t nbytes);
// 返回数为读到的字节数，若已到文件尾，返回0；出错返回-1
```

#### 函数write

write 为向打开文件写数据。

```c
#include <unistd.h>
ssize_t write(int fd, const void *buf, size_t nbytes);
// 成功返回以写的字节数，否则返回-1
```

其中返回值通常与参数 nbytes 相同，否则写入出错。

使用 read 和 write 函数复制一个文件。

```c
#include "apue.h"

#define	BUFFSIZE	4096

int
main(void)
{
	int		n;
	char	buf[BUFFSIZE];

	while ((n = read(STDIN_FILENO, buf, BUFFSIZE)) > 0)
		if (write(STDOUT_FILENO, buf, n) != n)
			err_sys("write error");

	if (n < 0)
		err_sys("read error");

	exit(0);
}
```

大多数文件系统为改善性能都采用某种预读（ read ahead ）技术。当检测到正进行顺序读取时，系统就试图读入比应用所要求的更多数据，并假想应用很快就会读到这些数据。

#### 文件共享

UNIX系统支持在不同进程间共享打开文件。

内核中使用3种数据结构表示打开文件，它们之间的关系决定了在文件共享方面一个进程对另外一个进程可能产生的影响。

1. 每个进程在进程表中都有一个记录项，记录项中包含一张打开文件描述符表，可见其视为一个矢量，每个描述符占用一项。与每个文件描述符相关联的是：文件描述符标志；指向一个文件表项的指针。
2. 内核为所有打开文件维持一张文件表。每个文件表项包含：文件状态标志；当前文件偏移量；指向文件 v 节点表项的指针。
3. 每个打开的文件都有一个 v 节点（v-node）结构。v 节点中包含了文件类型和对此文件进行各种操作函数的指针。对于大多数文件，v 节点还包含了该文件的 i 节点（i-node，索引节点）。这些信息都是打开文件时从磁盘上读取的，所以，文件的所有相关信息都是随时可用的。

**注意**：Linux中没有使用 v 节点，而是使用了通用的 i 节点结构。

![3-7](https://pic2.zhimg.com/80/v2-6953d46ea7de41c416bec6dbdfe2f02d_hd.jpg)

上图显示了进程对应的3张表之间的关系。该进程有两个不同的打开文件：一个文件从标准输入打开（文件描述符0），另一个从标准输出打开（文件描述符1）。

如果是两个独立的进程打开了同一个文件，则如下图所示：

![3-8](https://pic1.zhimg.com/80/v2-8c11e439e872385864ee875db5b4af80_hd.jpg)

第一个进程在文件描述符3上打开文件，第二个进程在文件描述符4上打开文件。打开该文件的每个进程都获得一个文件表项（这样可以对每个进程获得自己的文件当前偏移量），但是对一个给定的文件只有一个 v 节点表项。

#### 原子操作

原子操作指的是多步组成的一个操作。如果该操作原子地执行，则要么执行完所有步骤，要么一步也不执行。

#### 函数dup和dup2

下面两个函数都可以用来复制一个现有的文件描述符：

```c
#include <unistd.h>
int dup(int fd);
int dup2(int fd, int fd2);
// 成功则返回新的文件描述符，失败则返回-1
```

由 dup 返回的新文件描述符一定是当前描述符中的最小数值。对于 dup2 可以用 fd2 参数指定新描述符的值。如果 fd2 已经打开，则先将其关闭。如果 fd 等于 fd2，则 fup2 返回 fd2，而不关闭它。否则，fd2 的 FD_CLOEXEC 文件描述符标志就被清除，这样 fd2 在进程调用 exec 时是打开状态。

这些函数返回的新文件描述符与参数 fd 共享同一个文件表项，如下图所示：

![3-9](https://pic2.zhimg.com/80/v2-3f3199b1507bf5683d16b7898f9eaff5_hd.jpg)

#### 函数sync、fsync和fdatasync

传统的UNIX系统实现在内核中设有缓冲区告诉缓存或页告诉缓存，大多数磁盘I/O都通过缓冲区进行。当我们向文件写入数据时，内核通常先将数据复制到缓冲区中，然后排入队列，晚些时候再写入磁盘。

通常，当内核需要重用缓冲区来存放其他磁盘块数据时，他会把所有延迟写数据块写入磁盘。为了保证磁盘上实际文件系统与缓冲区中的内容一致，所以引入以下函数：

```c
#include <unistd.h>
int fsync(int fd);
int fdatasync(int fd);
// 成功返回0，否则返回-1
void sync(void);
```

sync 只是将所有修改过的块缓冲区排入写队列，然后就返回，它并不等待实际写磁盘操作结束。**通常称为 update 的系统守护进程周期性地（30秒）调用 sync函数。**这就保证了定期冲洗（flush）内核的块缓冲区。

fsync 函数支队由文件描述符 fd 指定的一个文件起作用，并且等待写磁盘操作结束才返回。（可以应用于数据库中）

fdatasync 函数只影响文件的数据部分。而除数据部分外，fsync 还会同步更新文件的属性。

#### 函数fcntl

fcntl 函数可以改变已经打开文件的属性。

```c
#include <fcntl.h>
int fcntl(int fd, int cmd, .../* int arg */);
// 成功返回值依赖于cmd，失败返回-1
```

第三个参数总是一个整数，与上面所示函数原型中的注释部分对应。

1. 复制一个已有的文件描述符（cmd = F_DUPFD/F_DUPFD_CLOEXEC）。
2. 获取/设置文件描述符标志（cmd = F_GETFD/F_SETFD）。
3. 获取/设置文件的状态标志（cmd = F_GETFL/F_SETFL）。
4. 获取/设置异步I/O所有权（cmd = F_GETOWN/F_SETOWN）。
5. 获取/设置记录锁（cmd = F_GETLK/F_SETLK/F_SETLKW）。

#### /dev/fd

`/dev/fd`的目录名为0、1、2等的文件。打开文件`/dev/df/n`等效于复制描述符 n 。

```c
fd = open("/dev/fd/0", mode);
fd = dup(0);
```

上述两条语句实际上是等小的（大多数系统忽略它所指定的 mode ）。

Linux实现中的`/dev/fd`是个例外。他把文件描述符映射成指向底层物理文件的符号链接。例如，当打开`/dev/fd/0`时，事实上正在打开与标准输入关联的文件，因此返回的新文件描述符的模式与`/dev/fd`文件描述符的模式其实并不相关。
