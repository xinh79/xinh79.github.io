---
layout:      post
title:       "Linux常用命令-I"
subtitle:    "Job Interview"
author:      "Ashior"
header-img:  "img/post-bg-ubuntu.jpg"
catalog:     true
tags:
  - 面试
  - Linux
  - 工作
---

#### 详细信息

[Linux Tools Quick Tutorial](https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/)

[廖雪峰 git教程](https://www.liaoxuefeng.com/wiki/896043488029600)

1. 使用命令：`git add <file>`，注意，可反复多次使用，添加多个文件；
2. 使用命令：`git commit -m <message>`，完成。
3. 克隆仓库：`git clone https://github.com/xinh79/Server4C`
4. 生成ssh密钥命令：`ssh-keygen -t rsa -C "ashior@qq.com"`
5. 连接github命令：`ssh -T git@github.com`
6. 连接github命令：`git remote add origin git@github.com:ashior/Server4C.git`
7. 推送master分支的所有内容：`git push -u origin master`
8. 创建dev分支：`git branch dev`
9. 切换至dev分支：`git checkout dev`
10. 切换至主分支：`git checkout master`
11. 合并指定分支到当前分支：`git merge dev`
12. 删除dev分支：`git branch -d dev`
13. 查看branch：`git branch`
14. 创建并切换到新的dev分支：`git switch -c dev`
15. 直接切换到已有的master分支：`git switch master`
16. --no-ff参数，表示禁用Fast forward：`git merge --no-ff -m "merge with no-ff" dev`

[gdb 调试利器](https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html#id3)

[AWK 简明教程](https://coolshell.cn/articles/9070.html)

[sed 简明教程](https://coolshell.cn/articles/9104.html)

[g++参数介绍](https://www.cnblogs.com/lidan/archive/2011/05/25/2239517.html)

[Linux tcpdump命令详解](https://www.cnblogs.com/ggjucheng/archive/2012/01/14/2322659.html)

[Linux Netcat 命令——网络工具中的瑞士军刀](https://www.oschina.net/translate/linux-netcat-command)

[CURL常用命令](https://www.cnblogs.com/gbyukg/p/3326825.html)

#### 查看依赖库：ldd

程序依赖库查询

- ldd后接可执行文件
- 第一列为程序依赖什么库，第二列为系统提供的与程序需要的库所对应的库，第三列为库加载的开始地址
- 前两列可以判断系统提供的库和需要的库是否匹配，第三列可以知道当前库在进程地址空间中对应的开始位置。

#### 文件查找：find

按名查找：

```shell
# 查找具体文件（一般方式）

find . -name *.cpp

# 查找具体文件（正则方式）
# -regex为正则查找，-iregex为忽略大小写的正则查找 

find -regex ".*.cpp$"
```

定制查找：

```shell
# 按类型查找
# f(file)为文件，d(dictionary)为目录，l(link)为链接

find . -type f

# 按时间查找
# atime为访问时间，x天内加参数"-atime -x"
# mtime为修改时间

find . -type f -atime -7

# 按大小查找
# -size后接文件大小，单位可以为k(kb)，m(MB)，g(GB)

find . -type f -size -1k

# 按权限查询
# -perm后接权限

find . -type -perm 644
```

#### 文本搜索：grep

```shell
# 模式匹配
# 匹配test.cpp文件中含有"iostream"串的内容

grep "iostream" test.cpp  

# 多个模式匹配
# 匹配test.cpp文件中含有"iostream"和"using"串的内容

grep -e "using" -e "iostream" test.cpp  

# 输出信息
# -n为打印匹配的行号；-i搜索时忽略大小写；-c统计包含文本次数

grep -n "iostream" test.cpp  
```

#### 排序：sort

```shell
# 文件内容行排序
# 排序在内存进行，不改变文件
# -n(number)表示按数字排序，-d(dictionary)表示按字典序
# -k N表示按各行第N列进行排序
# -r(reverse)为逆序排序

sort -n -k 1 test
```

#### 转换：tr

```shell

# 字符替换
# 转换在内存进行，不改变文件
# 将打开文件中所有目标字符替换

cat test | tr '1' '2'

# 字符删除
# 转换在内存进行，不改变文件
# -d删除(delete)

cat test | tr -d '1'

# 字符压缩
# 转换在内存进行，不改变文件
# -s位于后部

cat test | tr ' ' -s
```

#### 按列切分文本：cut

```shell

# 截取特定列
# 截取的内存进行，不改变文件
# -b(byte)以字节为单位，-c(character)以字符为单位，-f以字段为单位
# 数字为具体列范围

cut -f 1,2 test

# 指定界定符
# 截取的内存进行，不改变文件
# -d后接界定符

cut -f 2 -d ',' new
```

#### 按列拼接文本：paste

```shell
# 按列拼接
# 在内存中拼接，不改变文件
# 将两个文件按对应列拼接
# 最后加上-d "x"会将x作为指定分隔符（paste test1 test2 -d ","）
# 两文件列数可以不同 

paste test1 test2

# 指定界定符拼接
# 在内存中拼接，不改变文件
# 按照-d之后给出的界定符拼接

paste test1 test2 -d ","
```

#### 统计行和字符：wc

```shell
# 基本统计
# -l统计行数(line)，-w统计单词数(word)，-c统计字符数(character)

wc -l test
```

#### 进程查询：ps

```shell
# 查看正在运行进程
# 常结合grep筛选信息(e.g, ps -ef | grep xxx)

ps -ef

# 以完整格式显示所有进程
# 常结合grep筛选信息

ps -ajx

# 列出目前所有正在内存中运行的程序

ps aux
```

#### 进程监控：top

```shell
# 显示实时进程信息
# 这是个大招，都不带参数的，具体信息通过grep筛选
# 交互模式下键入 M 进程列表按内存使用大小降序排列，键入 P 进程列表按 CPU 使用大小降序排列
# %id 表示 CPU 空闲率，过低表示可能存在CPU存在瓶颈
# %wa 表示等待 I/O 的 CPU 时间百分比，过高则 I/O 存在瓶颈 > 用 iostat 进一步分析

top
```

#### 打开文件查询：lsof

```shell
# 查看占用某端口的进程
# 最常见的就是mysql端口被占用使用(lsof i:3307)
# 周知端口(ftp:20/21, ssh:22, telnet:23, smtp:25, dns:53, http:80, pop3:110, https:443)

lsof -i:53

# 查看某用户打开的文件
# -u(user)为用户，后接用户名

lsof -u inx

# 查看指定进程打开的文件
# -p(process)为进程，后接进程PID

lsof -p 12345

# 查看指定目录下被进程打开的文件
# 这里是"+d"，需要注意，使用"+D"递归目录

lsof +d /test
```

#### 内存使用量：free

```shell
# 内存使用量
# 可获得内存及交换区的总量，已使用量，空闲量等信息

free
```

#### 监控性能指标：sar

监控CPU：

```shell
# 监控CPU负载
# 加上-q可以查看运行队列中进程数，系统上进程大小，平均负载等
# 这里"1"表示采样时间间隔是1秒，这里"2"表示采样次数为2

sar -q 1 2

# 监控CPU使用率
# 可以显示CPU使用情况
# 参数意义同上

sar -u 1 2
```

监控内存：

```shell
# 查询内存
# 可以显示内存使用情况
# 参数意义同上 

sar -r 1 2

# 页面交换查询
# 可以查看是否发生大量页面交换，吞吐率大幅下降时可用
# 参数意义同上

sar -W 1 2
```

#### 网卡配置：ifconfig

链路层

```shell
# 显示设备信息
# 可以显示已激活的网络设备信息

ifconfig

# 启动关闭指定网卡
# 前一个参数为具体网卡，后一个为开关信息
# up为打开，down为关闭

ifconfig eth0 up

# 配置IP地址
# 前一个参数为具体网卡，后一个为配置的IP地址

ifconfig eth0 192.168.1.1

# 设置最大传输单元
# 前一个参数为具体网卡，后面为MTU的大小
# 设置链路层MTU值，通常为1500

ifconfig eth0 mtu 1500

# 启用和关闭ARP协议
# 开启arp如下，若关闭则-arp

ifconfig eth0 arp
```

#### 查看当前网络连接：netstat

链路层/网络层/传输层








```shell
# 网络接口信息
# 显示网卡信息，可结合ifconfig学习

netstat -i

# 列出端口
# -a(all)表示所有端口，-t(tcp)表示所有使用中的TCP端口
# -l(listening)表示正在监听的端口

netstat -at

# 显示端口统计信息
# -s(status)显示各协议信息
# -加上-t(tcp)显示tcp协议信息，加上-u(udp)显示udp协议信息

netstat -s

# 显示使用某协议的应用名
# -p(progress)表示程序，可以显示使用tcp/udp协议的应用的名称

netstat -pt

# 查找指定进程、端口
# 互逆操作第一个显示某程序使用的端口号，第二个显示某端口号的使用进程
# 第二个操作可以用lsof替代

netstat -ap | grep ssh
netstat -an | grep ':80'
```

#### 查看路由表：route

网络层IP协议

```shell
# 查看路由信息
# 得到路由表信息，具体分析路由表工作需要网络知识
# 可以通过netstat -r(route)得到同样的路由表

route
```

#### 检查网络连通性：ping

网络层ICMP协议

```shell
# 检查是否连通
# 主要功能是检测网络连通性
# 可以额外得到网站的ip地址和连接最大/最小/平均耗时。

ping baidu.com
```

#### 转发路径：traceroute

网络层ICMP协议

```shell
# 文件包途径的IP
# 可以打印从沿途经过的路由器IP地址

traceroute baidu.com
```

#### 终止进程：kill

```shell
# 杀死具体进程
# 加具体进程PID

kill 12345

# 杀死某进程相关进程
# 加上"-9"杀死某进程相关进程

kill -9 12345
```

#### 修改文件权限：chmod

```shell
# 更改文件权限
# 可以对三种使用者设置权限，u(user, owner)，g(group)，o(other)
# 文件可以有三种权限，r(read)，w(write)，x(execute)
# 这里u+r表示文件所有者在原有基础上增加文件读取权限
# 这里777分别对应，u=7，g=7，o=7，具体数字含义自行google

chmod u+r file
chmod 777 file
```

#### 修改文件权限：chmod

```shell
# 更改文件权限
# 可以对三种使用者设置权限，u(user, owner)，g(group)，o(other)
# 文件可以有三种权限，r(read)，w(write)，x(execute)
# 这里u+r表示文件所有者在原有基础上增加文件读取权限
# 这里777分别对应，u=7，g=7，o=7，具体数字含义自行google

chmod u+r file
chmod 777 file
```

#### 创建链接：ln

```shell
# 创建硬链接
# 文件inode中链接数会增加，只有链接数减为0时文件才真正被删除

ln file1 file2

# 创建软（符号链接）链接
# -s(symbol)为符号链接，仅仅是引用路径
# 相比于硬链接最大特点是可以跨文件系统
# 类似于Windows创建快捷方式，实际文件删除则链接失效

ln -s file1 file2
```

#### 显示文件尾：tail

```shell
# 查看文件尾部
# -f参数可以不立即回传结束信号，当文件有新写入数据时会及时更新
# 查看日志时常用

tail -f test
```

#### 设置别名：alias

```shell
# 常用命令添加别名
# ".bashrc"文件中配置常用命令别名，生效后在命令行只需要使用别名即可代替原先很长的命令

alias rm='rm -i'
```

