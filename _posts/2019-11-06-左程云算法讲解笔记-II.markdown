---
layout:      post
title:       "左程云算法讲解笔记-II"
subtitle:    "Algorithm"
author:      "Ashior"
header-img:  "img/bg-zuo-algorithm.jpg"
catalog:     true
tags:
  - 工作
  - 算法
---

> 这些内容是从牛客网左程云大神的算法课程中做记录的笔记，由于内容较多，又附上源码，所以考虑一章一个模块。

> 此次修改同样是增加了代码的注释，去除非必要代码，重点讲述理清逻辑思路

[TOC]

----

## [技巧]打印矩阵

#### 转圈打印数组

打印的矩阵的常规思路就是判断边界条件，实际上试图寻找轨迹是很麻烦的一件事情。

设`(row1, col1) (raw2, col2)`为左上角与右下角的矩阵，然后打印这个矩阵的外围，之后再左上角的值均`++`，右下角的值均`--`。

```java
public static void spiralOrderPrint(int[][] matrix) {
    int tR = 0;
    int tC = 0;
    int dR = matrix.length - 1;
    int dC = matrix[0].length - 1;
    while (tR <= dR && tC <= dC) {
        printEdge(matrix, tR++, tC++, dR--, dC--);
    }
}

public static void printEdge(int[][] m, int tR, int tC, int dR, int dC) {
    if (tR == dR) { // 当前数据只有一行
        for (int i = tC; i <= dC; i++) {
            System.out.print(m[tR][i] + " ");
        }
    } else if (tC == dC) { // 当前数据只有一列
        for (int i = tR; i <= dR; i++) {
            System.out.print(m[i][tC] + " ");
        }
    } else {
        // 3 1 2 4
        // 5 6 7 8
        // 9 0 3 1
        // 打印的顺序时：
        // 1 2 3
        // 4 8
        // 1 3 0
        // 9 5
        int curC = tC;
        int curR = tR;
        while (curC != dC) {
            System.out.print(m[tR][curC] + " ");
            curC++;
        }
        while (curR != dR) {
            System.out.print(m[curR][dC] + " ");
            curR++;
        }
        while (curC != tC) {
            System.out.print(m[dR][curC] + " ");
            curC--;
        }
        while (curR != tR) {
            System.out.print(m[curR][tC] + " ");
            curR--;
        }
    }
}
```

#### Z字打印数组[ZigZagPrintMatrix]

从全局出发（宏观调度），就是如何打印一条对角线。同样是取两个点，从起左上角开始，一起移动至右下角。

```java
public static void printMatrixZigZag(int[][] matrix) {
    int tR = 0;
    int tC = 0;
    int dR = 0;
    int dC = 0;
    int endR = matrix.length - 1;
    int endC = matrix[0].length - 1;
    boolean fromUp = false;
    while (tR != endR + 1) {
        printLevel(matrix, tR, tC, dR, dC, fromUp);
        tR = tC == endC ? tR + 1 : tR;
        tC = tC == endC ? tC : tC + 1;
        dC = dR == endR ? dC + 1 : dC;
        dR = dR == endR ? dR : dR + 1;
        fromUp = !fromUp;
    }
    System.out.println();
}

public static void printLevel(int[][] m, int tR, int tC, int dR, int dC,
        boolean f) {
    if (f) {
        while (tR != dR + 1) {
            System.out.print(m[tR++][tC--] + " ");
        }
    } else {
        while (dR != tR - 1) {
            System.out.print(m[dR--][dC++] + " ");
        }
    }
}
```

----

## 在行列都排好序的矩阵中找数

给定一个`N*M`整型矩阵matrix，e.g.

```
0 1 2 5
2 3 4 7
4 4 4 8
5 7 7 9
```

如果k为7，返回`true`，如果k为6，则返回`false`；要求时间复杂度为`O(N+M)`，额外空间为`O(1)`。

**解题思路：**从右上角的数开始比较，如果比查找值更大，则往左移动，如果比查找值更小，则往下移动。（也可以从左下角开始移动）

```java
public static boolean isContains(int[][] matrix, int K) {
	int row = 0;
	int col = matrix[0].length - 1;
	while (row < matrix.length && col > -1) {
		if (matrix[row][col] == K) {
			return true;
		} else if (matrix[row][col] > K) {
			col--;
		} else {
			row++;
		}
	}
	return false;
}
```

----

## 打印两个有序链表的公共部分

类似于归并排序的外排步骤，两个指针，谁小谁移动，如果相等则记录，并同时往下移动。

```java
public static class Node {
    public int value;
    public Node next;
    public Node(int data) {
        this.value = data;
    }
}

public static void printCommonPart(Node head1, Node head2) {
    System.out.print("Common Part: ");
    while (head1 != null && head2 != null) {
        if (head1.value < head2.value) {
            head1 = head1.next;
        } else if (head1.value > head2.value) {
            head2 = head2.next;
        } else {
            System.out.print(head1.value + " ");
            head1 = head1.next;
            head2 = head2.next;
        }
    }
    System.out.println();
}

public static void printLinkedList(Node node) {
    System.out.print("Linked List: ");
    while (node != null) {
        System.out.print(node.value + " ");
        node = node.next;
    }
    System.out.println();
}
```

----

## 判断一个链表是否为一个回文结构

时间复杂度为`O(N)`，空间复杂度为`O(1)`。

1. 数据结构栈的解法：当不要求额外空间的时候，我们可以使用数据结构栈，遍历两次链表，第一次压栈，第二次出栈的过程中与链表进行比对。

2. 快慢指针的解法1（空间复杂度为`O(N)`）：**快指针一次移动两步，慢指针每次移动一步，当快指针到最后的时候，慢指针刚好指向中间。**之后再将慢指针之后的部分存入栈中，再与链表开始的地方进行比对。（栈省去一半的空间）

3. 快慢指针的解法2（空间复杂度为`O(1)`）：当慢指针走到中间的时候，将慢指针之后的所有链表逆序。然后再两边“从头”开始遍历链表，中间有任何一个不同，则返回`false`，直到最后到达慢指针的下一个位置。

```java
// need n extra space
public static boolean isPalindrome1(Node head) {
	Stack<Node> stack = new Stack<Node>();
	Node cur = head;
	while (cur != null) {
		stack.push(cur);
		cur = cur.next;
	}
	while (head != null) {
		if (head.value != stack.pop().value) {
			return false;
		}
		head = head.next;
	}
	return true;
}

// need n/2 extra space
public static boolean isPalindrome2(Node head) {
	if (head == null || head.next == null) {
		return true;
	}
	// 注意起始值，同时注意
	Node right = head.next;
	Node cur = head;
	// 快指针移动到最后，即之后只有一个位置或者已经处于末端时
	while (cur.next != null && cur.next.next != null) {
		right = right.next;
		cur = cur.next.next;
	}
	// 从慢指针的位置开始，将数据压入栈中
	Stack<Node> stack = new Stack<Node>();
	while (right != null) {
		stack.push(right);
		right = right.next;
	}
	// 从栈中弹出，比较
	while (!stack.isEmpty()) {
		if (head.value != stack.pop().value) {
			return false;
		}
		head = head.next;
	}
	return true;
}

// need O(1) extra space
public static boolean isPalindrome3(Node head) {
	if (head == null || head.next == null) {
		return true;
	}
	Node n1 = head;
	Node n2 = head;
	while (n2.next != null && n2.next.next != null) { // find mid node
		n1 = n1.next; // n1 -> mid
		n2 = n2.next.next; // n2 -> end
	}
	// 对应取得慢指针的下一个位置
	// 如果是基数，则对应中间的下一个位置，即中间的不需要比较了，共享
	// 如果是偶数，则对应中间的下一个位置，从此时开始逆序
	n2 = n1.next; // n2 -> right part first node
	n1.next = null; // mid.next -> null
	Node n3 = null;
	while (n2 != null) { // right part convert
		n3 = n2.next; // n3 -> save next node
		n2.next = n1; // next of right node convert
		n1 = n2; // n1 move
		n2 = n3; // n2 move
	}
	n3 = n1; // n3 -> save last node
	n2 = head;// n2 -> left first node
	boolean res = true;
	while (n1 != null && n2 != null) { // check palindrome
		if (n1.value != n2.value) {
			res = false;
			break;
		}
		n1 = n1.next; // left to mid
		n2 = n2.next; // right to mid
	}
	n1 = n3.next;
	n3.next = null;
	while (n1 != null) { // recover list
		n2 = n1.next;
		n1.next = n3;
		n3 = n1;
		n1 = n2;
	}
	return res;
}
```

----

## [技巧]将单向链表按某值划分成左边小，中间相等，右边大的形式

1. 将链表中的内容放入数组中，然后将数组进行一个partition过程。则外空间复杂度为O(n)。

2. 不适用额外数组的过程。使用三个指针，分别表示大于，等于，小于的节点。首先遍历一次链表，然后根据与分割数比较的结果，将其接入三个对应的指针后。最后遍历完成，再将三个链表依次连接即可。**判断两个指针是否指向同一个节点，不是通过val值，而是通过内存地址是否相等。**

```java
public static Node listPartition2(Node head, int pivot) {
	Node sH = null; // small head
	Node sT = null; // small tail
	Node eH = null; // equal head
	Node eT = null; // equal tail
	Node bH = null; // big head
	Node bT = null; // big tail
	Node next = null; // save next node
	// every node distributed to three lists
	while (head != null) {
		next = head.next;
		head.next = null;
		if (head.value < pivot) {
			if (sH == null) {
				sH = head;
				sT = head;
			} else {
				sT.next = head;
				sT = head;
			}
		} else if (head.value == pivot) {
			if (eH == null) {
				eH = head;
				eT = head;
			} else {
				eT.next = head;
				eT = head;
			}
		} else {
			if (bH == null) {
				bH = head;
				bT = head;
			} else {
				bT.next = head;
				bT = head;
			}
		}
		head = next;
	}
	// small and equal reconnect
	if (sT != null) {
		sT.next = eH;
		eT = eT == null ? sT : eT;
	}
	// all reconnect
	if (eT != null) {
		eT.next = bH;
	}
	return sH != null ? sH : eH != null ? eH : bH;
}
```

----

## [技巧]深度拷贝含有随机指针节点的链表

1. 利用map存储链表节点，key值为旧节点，value为新节点。（存储老链表与新链表的对应关系）

2. 就在原链表中进行操作，拷贝出来的新节点直接加在旧节点之后，此时连接rand的时候，只需要指向旧节点所指向的rand的next即可。最后拆分next指针即可。

形式：`1->1'->2->2'->3->3'->null`

```java
// 使用hash数据结构来解决此问题
public static Node copyListWithRand1(Node head) {
	HashMap<Node, Node> map = new HashMap<Node, Node>();
	Node cur = head;
	// map中存放老节点为key值，新节点为value值
	while (cur != null) {
		map.put(cur, new Node(cur.value));
		cur = cur.next;
	}
	cur = head;
	while (cur != null) {
		// 将创建的新节点的next与rand进行赋值
		map.get(cur).next = map.get(cur.next);
		map.get(cur).rand = map.get(cur.rand);
		cur = cur.next;
	}
	return map.get(head);
}

public static Node copyListWithRand2(Node head) {
	if (head == null) {
		return null;
	}
	Node cur = head;
	Node next = null;
	// copy node and link to every node
	while (cur != null) {
		next = cur.next;
		cur.next = new Node(cur.value);
		cur.next.next = next;
		cur = next;
	}
	cur = head;
	Node curCopy = null;
	// set copy node rand
	while (cur != null) {
		next = cur.next.next;
		curCopy = cur.next;
		curCopy.rand = cur.rand != null ? cur.rand.next : null;
		cur = next;
	}
	Node res = head.next;
	cur = head;
	// split
	while (cur != null) {
		next = cur.next.next;
		curCopy = cur.next;
		cur.next = next;
		curCopy.next = next != null ? next.next : null;
		cur = next;
	}
	return res;
}
```

----

## [难]两个单链表相交的一系列问题

> 此题目其实主要是逻辑清晰，就问题不大，剩下的全是代码能力。

要求时间复杂度为`O(N+M)`，额外的空间复杂度为`O(1)`

1. 判断节点有环无环。**使用哈希表结构：**将指针的内容（非val值）加入set中，每个节点都接入set中，如果重复则直接返回。走到空值，则为无环。**使用快慢指针：**快指针走到空，则为无环。如果快慢指针相遇，**快指针回到链表开头**，变成每次走一步，再次相遇的地方为**环入口地址节点**。

2. 然后分情况讨论。

3. 如果两条链表一条有环，一条无环，则两条链表必然不会相交。

4. 两条均为无环单链表：**使用哈希表结构**；不使用时，遍历两个链表，获取两个链表的长度，并且比较最后一个节点是否相同，如果不相同，则两个链表肯定不相交。如果相等，则此时链表长度更长的链表指针先移动一个长度差，之后再同步移动，最后一起到达入口处。例如：`link1.length = 100, link2.length = 80`则link1先移动20步，然后再同时移动。最后两个指针会在第一个相交点相遇。

5. 两个链表均有环：

(1)两个链表各自成环，不相交：如果**环入口地址节点**不相等，则其中一个继续往下走，查看是否碰到另外一个链表的**环入口地址节点**，如果没碰到，则各自成环不相交，否则答案为情况(3)。

(2)两个链表在单链表上面首先相交，然后再共享一个环：即如果两个环入口地址相等，根据之前获得的**环入口地址节点**，则将此作为最后的一个节点(不考虑后面的换)，然后按照无环单链表的判断逻辑从头开始遍历。

(3)两个链表在环上相交(参考兔子耳朵连着兔子脑袋)：参考情况(1)。

```java
public static Node getIntersectNode(Node head1, Node head2) {
	if (head1 == null || head2 == null) {
		return null;
	}
	Node loop1 = getLoopNode(head1);
	Node loop2 = getLoopNode(head2);
	if (loop1 == null && loop2 == null) {
		return noLoop(head1, head2);
	}
	if (loop1 != null && loop2 != null) {
		return bothLoop(head1, loop1, head2, loop2);
	}
	return null;
}

public static Node getLoopNode(Node head) {
	if (head == null || head.next == null || head.next.next == null) {
		return null;
	}
	Node n1 = head.next; // n1 -> slow
	Node n2 = head.next.next; // n2 -> fast
	while (n1 != n2) {
		if (n2.next == null || n2.next.next == null) {
			return null;
		}
		n2 = n2.next.next;
		n1 = n1.next;
	}
	n2 = head; // n2 -> walk again from head
	while (n1 != n2) {
		n1 = n1.next;
		n2 = n2.next;
	}
	return n1;
}

public static Node noLoop(Node head1, Node head2) {
	if (head1 == null || head2 == null) {
		return null;
	}
	Node cur1 = head1;
	Node cur2 = head2;
	int n = 0;
	while (cur1.next != null) {
		n++;
		cur1 = cur1.next;
	}
	while (cur2.next != null) {
		n--;
		cur2 = cur2.next;
	}
	if (cur1 != cur2) {
		return null;
	}
	cur1 = n > 0 ? head1 : head2;
	cur2 = cur1 == head1 ? head2 : head1;
	n = Math.abs(n);
	while (n != 0) {
		n--;
		cur1 = cur1.next;
	}
	while (cur1 != cur2) {
		cur1 = cur1.next;
		cur2 = cur2.next;
	}
	return cur1;
}

public static Node bothLoop(Node head1, Node loop1, Node head2, Node loop2) {
	Node cur1 = null;
	Node cur2 = null;
	if (loop1 == loop2) {
		cur1 = head1;
		cur2 = head2;
		int n = 0;
		while (cur1 != loop1) {
			n++;
			cur1 = cur1.next;
		}
		while (cur2 != loop2) {
			n--;
			cur2 = cur2.next;
		}
		cur1 = n > 0 ? head1 : head2;
		cur2 = cur1 == head1 ? head2 : head1;
		n = Math.abs(n);
		while (n != 0) {
			n--;
			cur1 = cur1.next;
		}
		while (cur1 != cur2) {
			cur1 = cur1.next;
			cur2 = cur2.next;
		}
		return cur1;
	} else {
		cur1 = loop1.next;
		while (cur1 != loop1) {
			if (cur1 == loop2) {
				return loop1;
			}
			cur1 = cur1.next;
		}
		return null;
	}
}
```


